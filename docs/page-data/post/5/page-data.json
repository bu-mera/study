{"componentChunkName":"component---src-templates-post-js","path":"/post/5","result":{"data":{"markdownRemark":{"html":"<h1>イベントをつける</h1>\n<p>React.jsでは、<code class=\"language-text\">onClick</code>とかとか使っていたかと思います。（<a href=\"https://ja.reactjs.org/docs/events.html\" target=\"_blank\" rel=\"noopener noreferrer\">他にも</a>）\nReact Nativeでは<code class=\"language-text\">onPress</code>を使います。\nReact.jsの場合は、Dom要素に<code class=\"language-text\">onClick</code>を指定すればイベントを付与することができました。が、React Nativeでは<code class=\"language-text\">Button</code>と<code class=\"language-text\">Text</code>、<code class=\"language-text\">Pressable</code>コンポーネントのみにしかありません。\n<em>※ v0.63から新しく<a href=\"https://reactnative.dev/docs/pressable\" target=\"_blank\" rel=\"noopener noreferrer\"><code class=\"language-text\">Pressable</code></a>コンポーネントが追加されました。</em></p>\n<div class=\"gatsby-highlight\" data-language=\"js:title=ok\"><pre class=\"language-js:title=ok\"><code class=\"language-js:title=ok\">&lt;Button onPress={ () =&gt; { console.log(&#39;hoge&#39;) } } title=&quot;button&quot; /&gt;\n&lt;Text onPress={ () =&gt; { console.log(&#39;hoge&#39;) } }&gt;button&lt;/Text&gt;</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js:title=ng\"><pre class=\"language-js:title=ng\"><code class=\"language-js:title=ng\">&lt;View onPress={ () =&gt; { console.log(&#39;hoge&#39;) } }&gt;\n  &lt;Text&gt;button&lt;/Text&gt;\n&lt;/View&gt;\n&lt;Image\n  onPress={ () =&gt; { console.log(&#39;hoge&#39;) } }\n  ...\n/&gt;</code></pre></div>\n<h3>Button</h3>\n<p><a href=\"https://reactnative.dev/docs/button\" target=\"_blank\" rel=\"noopener noreferrer\">https://reactnative.dev/docs/button</a></p>\n<h3>Text</h3>\n<p><a href=\"https://reactnative.dev/docs/text\" target=\"_blank\" rel=\"noopener noreferrer\">https://reactnative.dev/docs/text</a></p>\n<h3>Pressable</h3>\n<p><a href=\"https://reactnative.dev/docs/pressable\" target=\"_blank\" rel=\"noopener noreferrer\">https://reactnative.dev/docs/pressable</a></p>\n<h2>他にもないの？</h2>\n<p>あります。\nリストの親コンポーネントに<code class=\"language-text\">Button</code>は使いませんよね？<code class=\"language-text\">View</code>を使うと思います。</p>\n<div class=\"gatsby-code-title\">こんな感じで</div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>View style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span> styles<span class=\"token punctuation\">.</span>list <span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>View style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span> styles<span class=\"token punctuation\">.</span>listItem <span class=\"token punctuation\">}</span> onPress<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>Text<span class=\"token operator\">></span>リスト<span class=\"token number\">1</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Text<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>View<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>View onPress<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>Text<span class=\"token operator\">></span>リスト<span class=\"token number\">2</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Text<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>View<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>View<span class=\"token operator\">></span></code></pre></div>\n<p>ただ、<code class=\"language-text\">View</code>コンポーネントにはonPressプロパティは存在しないので、いくらタップしてもイベントは発火しません。\nそんな時、、、\nReact Nativeでは、<code class=\"language-text\">TouchableHighlight</code>や<code class=\"language-text\">TouchableOpacity</code>、<code class=\"language-text\">Touchablewithoutfeedback</code>コンポーネントが用意されている。用途に合わせて、それぞれのコンポーネントを使いわて使いましょう。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>View style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span> styles<span class=\"token punctuation\">.</span>list <span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>TouchableOpacity style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span> styles<span class=\"token punctuation\">.</span>listItem <span class=\"token punctuation\">}</span> onPress<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>Text<span class=\"token operator\">></span>リスト<span class=\"token number\">1</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Text<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>TouchableOpacity<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>TouchableOpacity onPress<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>Text<span class=\"token operator\">></span>リスト<span class=\"token number\">2</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Text<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>TouchableOpacity<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>View<span class=\"token operator\">></span></code></pre></div>\n<h2>ViewでTouchableXxxxxを囲わなくても大丈夫なの？</h2>\n<p>TouchableOpacity、TouchableHighlight、Touchablewithoutfeedbackは、<code class=\"language-text\">Animated.View</code>でwrapされています。</p>\n<div class=\"gatsby-code-title\">node_modules/react-native/Libraries/Components/Touchable/TouchableOpacity.js</div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// ...省略</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span>Node <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// BACKWARD-COMPATIBILITY: Focus and blur events were never supported before</span>\n    <span class=\"token comment\">// adopting `Pressability`, so preserve that behavior.</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n      onBlur<span class=\"token punctuation\">,</span>\n      onFocus<span class=\"token punctuation\">,</span>\n      <span class=\"token operator\">...</span>eventHandlersWithoutBlurAndFocus\n    <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>pressability<span class=\"token punctuation\">.</span><span class=\"token function\">getEventHandlers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>Animated<span class=\"token punctuation\">.</span>View\n        <span class=\"token comment\">// ...省略</span>\n        <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Animated<span class=\"token punctuation\">.</span>View<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// ...省略</span></code></pre></div>\n<p><code class=\"language-text\">Animated.View</code>を見てみると、</p>\n<div class=\"gatsby-highlight\" data-language=\"js:title=node_modules/react-native/libraries/animated/src/components/animatedview.js\"><pre class=\"language-js:title=node_modules/react-native/libraries/animated/src/components/animatedview.js\"><code class=\"language-js:title=node_modules/react-native/libraries/animated/src/components/animatedview.js\">import * as React from &#39;react&#39;;\nconst View = require(&#39;../../../Components/View/View&#39;);\nconst createAnimatedComponent = require(&#39;../createAnimatedComponent&#39;);\nimport type {AnimatedComponentType} from &#39;../createAnimatedComponent&#39;;\nmodule.exports = (createAnimatedComponent(View): AnimatedComponentType&lt;\n  React.ElementConfig&lt;typeof View&gt;,\n  React.ElementRef&lt;typeof View&gt;,\n&gt;);</code></pre></div>\n<p>わかりますね。Viewが使われてます。\nなので、TouchableXxxxxはViewでwrapしなくても大丈夫です。</p>\n<h2>各TouchableXxxxxコンポーネントの特徴</h2>\n<h3>TouchableHighlight</h3>\n<p><a href=\"https://reactnative.dev/docs/touchablehighlight\" target=\"_blank\" rel=\"noopener noreferrer\">https://reactnative.dev/docs/touchablehighlight</a></p>\n<ul>\n<li>wrapされた要素が（タップ時）ハイライトされる</li>\n<li>\n<p>ハイライトの詳細設定が可能（ドキュメント見てね）</p>\n<h3>TouchableOpacity</h3>\n<p><a href=\"https://reactnative.dev/docs/touchableopacity\" target=\"_blank\" rel=\"noopener noreferrer\">https://reactnative.dev/docs/touchableopacity</a></p>\n</li>\n<li>wrapされた要素が（タップ時）透過される</li>\n<li>\n<p>透過の詳細設定が可能（ドキュメント見てね）</p>\n<h3>Touchablewithoutfeedback</h3>\n<p><a href=\"https://reactnative.dev/docs/touchablewithoutfeedback\" target=\"_blank\" rel=\"noopener noreferrer\">https://reactnative.dev/docs/touchablewithoutfeedback</a></p>\n</li>\n<li>\n<p>イベントの付与のみ</p>\n<h2>TouchableXxxxxはonPressだけじゃない</h2>\n<p><code class=\"language-text\">Button</code>コンポーネントは<code class=\"language-text\">onPress</code>しかプロパティを持ちません。\nしかし、TouchableXxxxxは、<code class=\"language-text\">onPress</code>の他に、<code class=\"language-text\">onPressIn</code>タップされた時、<code class=\"language-text\">onPressOut</code>タップが外れた時にそれぞれ発火します。</p>\n<h2>発火される順番は？</h2>\n<p><code class=\"language-text\">onPressIn</code>→<code class=\"language-text\">onPressOut</code>→<code class=\"language-text\">onPress</code>の順です。</p>\n<h2>デバッグ方法は？</h2>\n<p>jsと同様<code class=\"language-text\">console.log</code>や<code class=\"language-text\">alert</code>を使うことで、logを出力することができる。</p>\n</li>\n</ul>\n<h1>ノッチ対応</h1>\n<p>2018年7月から、アップデートされるすべてのiOSアプリがノッチ対応を必須としなければならなくなりました。\nReact Nativeでは、<code class=\"language-text\">SafeAreaView</code>コンポーネントが用意されているのでSafeAreaViewを使い対応していきます。</p>\n<h2>SafeAreaViewって？</h2>\n<p>SafeAreaViewはiOSバージョン11以降(iPhone X以降)のデバイスのみに適用され、Androidの場合は適応されません。</p>\n<!-- もしAndroidにも対応させたい場合は`Platform.OS`でOSの判定をする必要があります。\n```js\nconst styles = StyleSheet.create({\n  androidSafeAreaView: {\n    …,\n    paddingTop: Platform.OS === 'android' ? 25 : 0\n  }\n})\n…\nreturn (\n  <SafeAreaView style={ styles.androidSafeAreaView }>\n    …\n  </SafeAreaView>\n)\n…\n``` -->\n<p>iPhone11（14.1）、iPhone8（14.1）、Android端末で下記のレイアウトを確認してみましょう。</p>\n<ol>\n<li>ノッチ対応なし</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">…\n<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>View style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> backgroundColor<span class=\"token operator\">:</span> <span class=\"token string\">'orange'</span><span class=\"token punctuation\">,</span> flex<span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>View style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> width<span class=\"token operator\">:</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> height<span class=\"token operator\">:</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> backgroundColor<span class=\"token operator\">:</span> <span class=\"token string\">'blue'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>View<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span>\n…</code></pre></div>\n<img src=\"/static/5553f8b7e1047517fadbb83c66c46bf7/001.png\" width=\"250\" alt=\"ノッチ対応なし\">\n<ol start=\"2\">\n<li>\n<p>ノッチ対応あり</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">…\n<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n<span class=\"token operator\">&lt;</span>SafeAreaView style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> flex<span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>View style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> backgroundColor<span class=\"token operator\">:</span> <span class=\"token string\">'orange'</span><span class=\"token punctuation\">,</span> flex<span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>View style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> width<span class=\"token operator\">:</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> height<span class=\"token operator\">:</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> backgroundColor<span class=\"token operator\">:</span> <span class=\"token string\">'blue'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>View<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>SafeAreaView<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span>\n…</code></pre></div>\n<img src=\"/static/f9ba4769f654a1a1b739fe638d03ddb2/002.png\" width=\"250\" alt=\"ノッチ対応あり\">\n</li>\n</ol>","fields":{"slug":"/post/5"},"frontmatter":{"title":"第4回 React Native -イベント・ノッチ-","date":"2020/11/12","tags":["React Native"]}}},"pageContext":{"prev":{"html":"<h1>スプラッシュ</h1>\n<!-- デフォルトではAndroidのスプラッシュはないので、まずは実装していきます。 -->\n<!-- \n\n[参考](https://medium.com/@appstud/add-a-splash-screen-to-a-react-native-app-810492e773f9)\n\n今回は黒背景のスプラッシュ画面を作成します。\n\n#### android/app/src/main/java/.../MainActivity.java\n\n```java\nimport android.os.Bundle;\nimport org.devio.rn.splashscreen.SplashScreen;\n\npublic class MainActivity extends ReactActivity {\n   @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        SplashScreen.show(this);\n        super.onCreate(savedInstanceState);\n    }\n}\n```\n\n#### android/app/src/main/res/layout/launch_screen.xml\n\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:orientation=\"vertical\" android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:background=\"@drawable/splash_screen\">\n</LinearLayout>\n```\n\n\nスプラッシュスクリーン描画用xmlファイル\ndrawable/splash_screen.xml\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<layer-list xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    \n    <item\n        android:drawable=\"@color/splash_background\"/>\n\n</layer-list>\n```\n\n背景色の定義\ncolor.xml\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<resources>\n  ...\n    <color name=\"splash_background\">#000000</color>\n</resources>\n```\n\n\nこれでスプラッシュの実装ができました。\nただ、このままでは起動直後に\n\n\n\n\nスプラッシュスクリーンアクティビティのテーマの定義\nvalues/styles.xml\n```\n...\n    <style name=\"SplashTheme\" parent=\"Theme.AppCompat.Light.NoActionBar\">\n        <item name=\"android:background\">@drawable/splash_screen</item>\n    </style>\n```\n\nスプラッシュアクティビティの作成\nSplashActivity.java\n```java\npackage [パッケージ名]; // 書き方は他Activityを参考にしてください。\n\nimport android.content.Intent;\nimport android.os.Bundle;\nimport androidx.appcompat.app.AppCompatActivity;\n\npublic class SplashActivity extends AppCompatActivity {\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        Intent intent = new Intent(this, MainActivity.class);\n        startActivity(intent);\n        finish();\n    }\n}\n```\nAndroidManifest.xml\n\n```\n...\n    <application>\n        <activity\n          android:name=\".SplashActivity\"\n          android:theme=\"@style/SplashTheme\"\n          android:label=\"@string/app_name\">\n          <intent-filter>\n              <action android:name=\"android.intent.action.MAIN\" />\n              <category android:name=\"android.intent.category.LAUNCHER\" />\n          </intent-filter>\n        </activity>\n        <activity\n          android:name=\".MainActivity\"\n          android:label=\"@string/app_name\"\n          android:configChanges=\"keyboard|keyboardHidden|orientation|screenSize\"\n          android:windowSoftInputMode=\"adjustResize\"\n          android:exported=\"true\"/>\n\n      <activity android:name=\"com.facebook.react.devsupport.DevSettingsActivity\" />\n    </application>\n``` -->\n<!-- ## 制御\n\n#### android/app/src/main/java/.../MainActivity.java\n\n```java\nimport android.os.Bundle;\nimport org.devio.rn.splashscreen.SplashScreen;\n\npublic class MainActivity extends ReactActivity {\n   @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        SplashScreen.show(this);\n        super.onCreate(savedInstanceState);\n    }\n}\n```\n\n#### android/app/src/main/res/layout/launch_screen.xml\n\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:orientation=\"vertical\" android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:background=\"@drawable/splash_screen\">\n</LinearLayout>\n``` -->\n<p>スプラッシュ画面とはアプリ起動直後の画面のことです。</p>\n<p>アプリ内で必要なデータの取得など、アプリの準備作業をスプラッシュ画面の裏側で行うことで、UXの向上を図ることができます。</p>\n<p>react nativeではプロジェクト作成時からiOS側では実装されていて、Android側では実装されていないので、Android側でのスプラッシュ画面の実装が必要となります。</p>\n<p>また、iOSのスプラッシュ画面もただ表示しているだけで、制御する必要があります。</p>\n<p>スプラッシュの制御には<code class=\"language-text\">react-native-splash-screen</code>を使用します。</p>\n<p>ネイティブ側でスプラッシュの表示をし、JS側では任意のタイミングで非表示にするようにします。</p>\n<h2>導入</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">yarn add react-native-splash-screen</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">cd ios\npod install</code></pre></div>\n<p>or</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npx pod-install ios</code></pre></div>\n<h2>スプラッシュの実装・制御</h2>\n<p>今回は青背景のスプラッシュ画面を作成します。</p>\n<h3>iOS</h3>\n<p>スプラッシュ画面のファイルは <code class=\"language-text\">ios/[プロジェクト名]/LaunchScreen.storyboard</code> です。\nデフォルトでは文字が表示されているので、不要部分を削除し、背景色を変更します。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">...\n&lt;!--View Controller--&gt;\n&lt;scene sceneID=&quot;EHf-IW-A2E&quot;&gt;\n    &lt;objects&gt;\n        &lt;viewController id=&quot;01J-lp-oVM&quot; sceneMemberID=&quot;viewController&quot;&gt;\n            &lt;view key=&quot;view&quot; contentMode=&quot;scaleToFill&quot; id=&quot;Ze5-6b-2t3&quot;&gt;\n                &lt;!-- subviews、constraintsの削除 --&gt;\n                &lt;rect key=&quot;frame&quot; x=&quot;0.0&quot; y=&quot;0.0&quot; width=&quot;375&quot; height=&quot;667&quot;/&gt;\n                &lt;autoresizingMask key=&quot;autoresizingMask&quot; widthSizable=&quot;YES&quot; heightSizable=&quot;YES&quot;/&gt;\n                &lt;viewLayoutGuide key=&quot;safeArea&quot; id=&quot;Bcu-3y-fUS&quot;/&gt;\n                &lt;!-- backgroundColorの変更 --&gt;\n                &lt;color key=&quot;backgroundColor&quot; red=&quot;0&quot; green=&quot;0&quot; blue=&quot;1&quot; alpha=&quot;1&quot; colorSpace=&quot;custom&quot; customColorSpace=&quot;sRGB&quot;/&gt;\n            &lt;/view&gt;\n        &lt;/viewController&gt;\n        &lt;placeholder placeholderIdentifier=&quot;IBFirstResponder&quot; id=&quot;iYj-Kq-Ea1&quot; userLabel=&quot;First Responder&quot; sceneMemberID=&quot;firstResponder&quot;/&gt;\n    &lt;/objects&gt;\n    &lt;point key=&quot;canvasLocation&quot; x=&quot;52.173913043478265&quot; y=&quot;375&quot;/&gt;\n&lt;/scene&gt;</code></pre></div>\n<p>次に、スプラッシュ画面の制御をしていきます。<br>\nアプリケーションの起動や終了や中断などの処理を記載している <code class=\"language-text\">ios/[ProjectName]/AppDelegate.m</code> に下記のように追加します。</p>\n<div class=\"gatsby-highlight\" data-language=\"m\"><pre class=\"language-m\"><code class=\"language-m\">...\n#import &quot;RNSplashScreen.h&quot; // add\n\n@implementation AppDelegate\n\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions\n{\n    ...\n    [RNSplashScreen show]; // add\n    return YES;\n}\n\n@end</code></pre></div>\n<h3>Android</h3>\n<p><a href=\"https://developer.android.com/guide/topics/resources/providing-resources?hl=ja\" target=\"_blank\" rel=\"noopener noreferrer\">Androidのリソース</a>は<code class=\"language-text\">android/app/src/main/res/</code>配下に配置する必要があり、リソースタイプ別に固有のディレクトリ名が必要となります。</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>mipmap/</td>\n<td>ランチャーアイコン（ホーム画面に表示されるアイコン）</td>\n</tr>\n<tr>\n<td>values/</td>\n<td>文字列、整数、色などの定義<br>colors.xml: 色の値の定義用<br>strings.xml: 文字列の値の定義用<br>styles.xml: スタイルの定義用</td>\n</tr>\n<tr>\n<td>drawable/</td>\n<td>画面上に描画するグラフィック</td>\n</tr>\n<tr>\n<td>layout/</td>\n<td>レイアウト定義用</td>\n</tr>\n</tbody>\n</table>\n<p>まず、<code class=\"language-text\">android/app/src/main/java/.../MainActivity.java</code> に下記のように追加します。</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">android<span class=\"token punctuation\">.</span>os<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Bundle</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// add</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>devio<span class=\"token punctuation\">.</span>rn<span class=\"token punctuation\">.</span>splashscreen<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SplashScreen</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// add</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MainActivity</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ReactActivity</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Bundle</span> savedInstanceState<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">SplashScreen</span><span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span>savedInstanceState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>スプラッシュ画面のレイアウトを定義するファイル <code class=\"language-text\">res/layout/launch_screen.xml</code> を作成します。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;\n&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;\n    android:orientation=&quot;vertical&quot; android:layout_width=&quot;match_parent&quot;\n    android:layout_height=&quot;match_parent&quot;\n    android:background=&quot;@drawable/splash_screen&quot;&gt;\n&lt;/LinearLayout&gt;</code></pre></div>\n<p>スプラッシュ画面を描画するためのファイル<code class=\"language-text\">res/drawable/splash_screen.xml</code> を作成します。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;\n&lt;layer-list xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;\n    \n    &lt;item\n        android:drawable=&quot;@color/splash_background&quot;/&gt;\n\n&lt;/layer-list&gt;</code></pre></div>\n<!--\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:orientation=\"vertical\" android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:background=\"@drawable/splash_screen\">\n</LinearLayout>\n```\n\nスプラッシュスクリーン描画用xmlファイル\ndrawable/splash_screen.xml\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<layer-list xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    \n    <item\n        android:drawable=\"@color/splash_background\"/>\n\n</layer-list>\n``` -->\n<p>最後に、<code class=\"language-text\">res/values/color.xml</code> に背景色の定義をします。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;\n&lt;resources&gt;\n  ...\n    &lt;color name=&quot;splash_background&quot;&gt;#0000FF&lt;/color&gt;\n&lt;/resources&gt;</code></pre></div>\n<h3>JS</h3>\n<p>AndroidとiOSでスプラッシュの表示ができたら、次はJS\n側で任意のタイミングで非表示にします。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> SplashScreen <span class=\"token keyword\">from</span> <span class=\"token string\">'react-native-splash-screen'</span>\n\n<span class=\"token comment\">// 非表示したい箇所で下記を記述</span>\nSplashScreen<span class=\"token punctuation\">.</span><span class=\"token function\">hide</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 一定時間経過後に非表示にする場合</span>\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  SplashScreen<span class=\"token punctuation\">.</span><span class=\"token function\">hide</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span></code></pre></div>\n<img src=\"/static/a7ad26704a033da526218bf68e842aab/sp-ios1.gif\" width=\"200\">\n<img src=\"/static/77db0ff1cb5321d91e5d9eb4669b849e/sp-and1.gif\" width=\"200\">\n<p>Androidのスプラッシュ画面ですが、起動直後には表示されていないのが確認できます。</p>\n<p>Androidでも起動直後から表示されるよう実装していきます。</p>\n<h3>Androidで起動直後にスプラッシュを出す</h3>\n<p><a href=\"https://medium.com/@appstud/add-a-splash-screen-to-a-react-native-app-810492e773f9\" target=\"_blank\" rel=\"noopener noreferrer\">参考ページ</a></p>\n<p>スプラッシュ用のアクティビティ <code class=\"language-text\">android/app/src/main/java/.../SplashActivity.java</code>  を作成します。</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token punctuation\">[</span>パッケージ名<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 書き方は他Activityを参考にしてください。</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">android<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Intent</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">android<span class=\"token punctuation\">.</span>os<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Bundle</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">androidx<span class=\"token punctuation\">.</span>appcompat<span class=\"token punctuation\">.</span>app<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">AppCompatActivity</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SplashActivity</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AppCompatActivity</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Bundle</span> savedInstanceState<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span>savedInstanceState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">Intent</span> intent <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Intent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">MainActivity</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">startActivity</span><span class=\"token punctuation\">(</span>intent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">finish</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">SplashActivity</code> 用のテーマの定義を <code class=\"language-text\">values/styles.xml</code> に記述します。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">...\n    &lt;style name=&quot;SplashTheme&quot; parent=&quot;Theme.AppCompat.Light.NoActionBar&quot;&gt;\n        &lt;item name=&quot;android:background&quot;&gt;@drawable/splash_screen&lt;/item&gt;\n    &lt;/style&gt;</code></pre></div>\n<p>アプリの基本的な情報が書かれているファイル <code class=\"language-text\">AndroidManifest.xml</code> に <code class=\"language-text\">SplashActivity</code> を追加します。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">...\n&lt;application&gt;\n\n    &lt;!-- SplashActivityの追加、MainActivityのintent-filterを移動 --&gt;\n    &lt;activity\n      android:name=&quot;.SplashActivity&quot;\n      android:theme=&quot;@style/SplashTheme&quot;\n      android:label=&quot;@string/app_name&quot;&gt;\n      &lt;intent-filter&gt;\n          &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;\n          &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;\n      &lt;/intent-filter&gt;\n    &lt;/activity&gt;\n\n    &lt;!-- intent-filterの削除、`android:exported=&quot;true&quot;`パラメータの追加 --&gt;\n    &lt;activity\n      android:name=&quot;.MainActivity&quot;\n      android:label=&quot;@string/app_name&quot;\n      android:configChanges=&quot;keyboard|keyboardHidden|orientation|screenSize&quot;\n      android:windowSoftInputMode=&quot;adjustResize&quot;\n      android:exported=&quot;true&quot;/&gt;\n\n  &lt;activity android:name=&quot;com.facebook.react.devsupport.DevSettingsActivity&quot; /&gt;\n&lt;/application&gt;</code></pre></div>\n<img src=\"/static/911a8aca7ca53044c0a4ff3e9e25979f/sp-and2.gif\" width=\"200\">\n<h1>アイコン</h1>\n<p>iOS/Androidともに、様々なサイズのリソースを設定する必要があります。\n今回はサイズ別にアイコンが全て用意されている前提で進めていきます。</p>\n<h2>iOS</h2>\n<p>Xcode上で設定していきます。</p>\n<p>ターゲット設定の <code class=\"language-text\">General &gt; App Icons and Launch Images &gt; App Icons Source</code> を編集します（右の矢印をクリック）</p>\n<img src=\"/static/f7903e8ec5b850eda4ef85a04d935683/icon1.png\" width=\"400\">\n<p>素材を各サイズに合わせてドラッグすることで、アイコンの設定は完了します。</p>\n<img src=\"/static/2621eacdd91f10326fadefd958641bfd/icon2.png\" width=\"400\">\n<h2>Android</h2>\n<h3><a href=\"https://developer.android.com/training/multiscreen/screendensities?hl=ja\" target=\"_blank\" rel=\"noopener noreferrer\">画面ピクセル密度（dpi）</a></h3>\n<p>Androidデバイスは、画面サイズだけでなく、画面のピクセルサイズも様々あります。\nそのため、各デバイスのピクセルの密度に合わせたリソースを使用する必要があります。\n密度によって下記のようなグループ分けがされます。</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ldpi</td>\n<td>低密度画面</td>\n</tr>\n<tr>\n<td>mdpi</td>\n<td>中密度画面</td>\n</tr>\n<tr>\n<td>hdpi</td>\n<td>高密度画面</td>\n</tr>\n<tr>\n<td>xhdpi</td>\n<td>超高密度画面</td>\n</tr>\n<tr>\n<td>xxhdpi</td>\n<td>超超高密度画面</td>\n</tr>\n<tr>\n<td>xxxhdpi</td>\n<td>超超超高密度画面</td>\n</tr>\n</tbody>\n</table>\n<p>リソースの使い分けをするためには、下記のように各グループごとに<code class=\"language-text\">mipmap/</code>ディレクトリを用意し、その中に対応するリソースを格納していきます。\nAndroidではプロジェクト作成時にデフォルトアイコンが設定されています。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">mipmap-xxxhdpi/\n  ic_launcher.png\n  ic_launcher_round.png\nmipmap-xxhdpi/\n  ic_launcher.png\n  ic_launcher_round.png\nmipmap-xhdpi/\n  ic_launcher.png\n  ic_launcher_round.png\nmipmap-hdpi/\n  ic_launcher.png\n  ic_launcher_round.png\nmipmap-mdpi/\n  ic_launcher.png\n  ic_launcher_round.png</code></pre></div>\n<h3><a href=\"https://developer.android.com/guide/practices/ui_guidelines/icon_design_adaptive?hl=ja\" target=\"_blank\" rel=\"noopener noreferrer\">アダプティブ アイコン</a></h3>\n<p>Android 8.0（API レベル 26）から、アダプティブ ランチャー アイコンが導入され、デバイスモデルごとに異なる図形を表示できるようになりました。\nアダプティブアイコンに対応した実装をしていきます。</p>\n<p><code class=\"language-text\">ic_launcher_foreground.png</code> と <code class=\"language-text\">ic_launcher_background.png</code>がdpi別に用意されている場合、同じように各ディレクトリに格納しておきます。</p>\n<p><code class=\"language-text\">res/mipmap-anydpi-v26/ic_launcher.xml</code>を作成します。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;\n&lt;adaptive-icon xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;\n    &lt;background android:drawable=&quot;@mipmap/ic_launcher_background&quot; /&gt;\n    &lt;foreground android:drawable=&quot;@mipmap/ic_launcher_foreground&quot; /&gt;\n&lt;/adaptive-icon&gt;</code></pre></div>\n<p>今回の場合のアイコン周りのディレクトリ構成は下記のようになります。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">mipmap-anydpi-v26/\n  ic_launcher.xml\nmipmap-xxxhdpi/\n  ic_launcher.png\n  ic_launcher_round.png\n  ic_launcher_foreground.png\n  ic_launcher_background.png\nmipmap-xxhdpi/\n  ic_launcher.png\n  ic_launcher_round.png\n  ic_launcher_foreground.png\n  ic_launcher_background.png\nmipmap-xhdpi/\n  ic_launcher.png\n  ic_launcher_round.png\n  ic_launcher_foreground.png\n  ic_launcher_background.png\nmipmap-hdpi/\n  ic_launcher.png\n  ic_launcher_round.png\n  ic_launcher_foreground.png\n  ic_launcher_background.png\nmipmap-mdpi/\n  ic_launcher.png\n  ic_launcher_round.png\n  ic_launcher_foreground.png\n  ic_launcher_background.png</code></pre></div>","fields":{"slug":"/post/7"},"frontmatter":{"date":"2020-11-26","title":"第6回 React Native -スプラッシュ・アイコン-","tags":["React Native"],"active":1}},"next":{"html":"<h1>React Nativeでの画像の表示</h1>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Image <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-native'</span></code></pre></div>\n<p><code class=\"language-text\">Image</code>コンポーネントを使います。</p>\n<h2>サーバにある画像は絶対パスで指定する</h2>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>Image\n  source<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> uri<span class=\"token operator\">:</span> <span class=\"token string\">'https://xxx.xxx.xxx'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n<span class=\"token operator\">/</span><span class=\"token operator\">></span></code></pre></div>\n<h2>ローカルにある画像はrequireを使う</h2>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>Image\n  source<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./assets/xxx.png'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n<span class=\"token operator\">/</span><span class=\"token operator\">></span></code></pre></div>\n<h3>requireを使うときの注意</h3>\n<p><code class=\"language-text\">require()</code>に指定できるのは文字列のみなので、変数を代入したり、文字連結合したりするとエラーになります。</p>\n<h4>エラーサンプル</h4>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> imagePath <span class=\"token operator\">=</span> <span class=\"token string\">'./assets/xxx.png'</span>\n<span class=\"token operator\">&lt;</span>Image\n  source<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span>imagePath<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n<span class=\"token operator\">/</span><span class=\"token operator\">></span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> imageName <span class=\"token operator\">=</span> <span class=\"token string\">'xxx'</span>\n<span class=\"token operator\">&lt;</span>Image\n  source<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">./assets/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span> imageName <span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">.png</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n<span class=\"token operator\">/</span><span class=\"token operator\">></span></code></pre></div>\n<h2>画像の縦横比率の変更</h2>\n<h3>resizeModeプロパティを指定する</h3>\n<h4>cover</h4>\n<ul>\n<li>縦横比は維持する</li>\n<li>width、heightの大きい数値に合わせて画像をリサイズする</li>\n</ul>\n<h4>contain</h4>\n<ul>\n<li>縦横比は維持する</li>\n<li>width、heightの小さい数値に合わせて画像をリサイズする</li>\n</ul>\n<h4>stretch</h4>\n<ul>\n<li>縦横比は維持しない</li>\n<li>width、heightの数値に合わせて画像をリサイズする</li>\n</ul>\n<h3>デモ</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> width<span class=\"token operator\">:</span> <span class=\"token number\">300</span><span class=\"token punctuation\">,</span> height<span class=\"token operator\">:</span> <span class=\"token number\">200</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code></pre></div>\n<img src=\"/static/d856743fc8e1051cc8690c0244fe859c/003.png\" width=\"300\" alt=\"\">\n<h1>アイコンを表示しよう</h1>\n<h2>react-native-vector-icons</h2>\n<p><a href=\"https://github.com/oblador/react-native-vector-icons\" target=\"_blank\" rel=\"noopener noreferrer\">github</a></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ yarn add react-native-vector-icons</code></pre></div>\n<h3>iOS</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">cd ios/\n$ pod install</code></pre></div>\n<p><code class=\"language-text\">ios/[ PROJECT_NAME ]/Info.plist</code>に以下を追記する。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>key<span class=\"token operator\">></span>UIAppFonts<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>key<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>array<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span>AntDesign<span class=\"token punctuation\">.</span>ttf<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>string<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span>Entypo<span class=\"token punctuation\">.</span>ttf<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>string<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span>EvilIcons<span class=\"token punctuation\">.</span>ttf<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>string<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span>Feather<span class=\"token punctuation\">.</span>ttf<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>string<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span>FontAwesome<span class=\"token punctuation\">.</span>ttf<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>string<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span>FontAwesome5_Brands<span class=\"token punctuation\">.</span>ttf<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>string<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span>FontAwesome5_Regular<span class=\"token punctuation\">.</span>ttf<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>string<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span>FontAwesome5_Solid<span class=\"token punctuation\">.</span>ttf<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>string<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span>Foundation<span class=\"token punctuation\">.</span>ttf<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>string<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span>Ionicons<span class=\"token punctuation\">.</span>ttf<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>string<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span>MaterialIcons<span class=\"token punctuation\">.</span>ttf<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>string<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span>MaterialCommunityIcons<span class=\"token punctuation\">.</span>ttf<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>string<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span>SimpleLineIcons<span class=\"token punctuation\">.</span>ttf<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>string<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span>Octicons<span class=\"token punctuation\">.</span>ttf<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>string<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span>Zocial<span class=\"token punctuation\">.</span>ttf<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>string<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span>Fontisto<span class=\"token punctuation\">.</span>ttf<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>string<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>array<span class=\"token operator\">></span></code></pre></div>\n<p>Xcodeで<code class=\"language-text\">Info.plist</code>から手動で追加することもできる。<br>\n+ボタンから<code class=\"language-text\">Fonts provided by application</code>でkeyを追加。<br>\n追加したいフォント名を追加する。</p>\n<img src=\"/static/6aa72c0263e4fdf596a54a513231d1c0/001.png\" width=\"500\" alt=\"Xcodeで手動で追加\">\n<h3>Android</h3>\n<p><code class=\"language-text\">android/app/build.gradle</code>に以下を追記する。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">apply <span class=\"token keyword\">from</span><span class=\"token operator\">:</span> <span class=\"token string\">\"../../node_modules/react-native-vector-icons/fonts.gradle\"</span></code></pre></div>\n<p><a href=\"https://oblador.github.io/react-native-vector-icons/\" target=\"_blank\" rel=\"noopener noreferrer\">アイコン一覧</a></p>\n<h2>演習</h2>\n<h3>Slackのプロフィールを模倣する</h3>\n<img src=\"/static/6e77f856d345bf63bf19df54c7f6e47e/002.gif\" width=\"250\" alt=\"Slackのプロフィールを模倣する\">","fields":{"slug":"/post/4"},"frontmatter":{"date":"2020-11-05","title":"第3回 React Native -画像を表示してみよう-","tags":["React Native"],"active":1}}}},"staticQueryHashes":["63159454"]}