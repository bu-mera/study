{"componentChunkName":"component---src-templates-post-js","path":"/post/4","result":{"data":{"markdownRemark":{"html":"<h1>React Nativeでの画像の表示</h1>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Image <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-native'</span></code></pre></div>\n<p><code class=\"language-text\">Image</code>コンポーネントを使います。</p>\n<h2>サーバにある画像は絶対パスで指定する</h2>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>Image\n  source<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> uri<span class=\"token operator\">:</span> <span class=\"token string\">'https://xxx.xxx.xxx'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n<span class=\"token operator\">/</span><span class=\"token operator\">></span></code></pre></div>\n<h2>ローカルにある画像はrequireを使う</h2>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>Image\n  source<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./assets/xxx.png'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n<span class=\"token operator\">/</span><span class=\"token operator\">></span></code></pre></div>\n<h3>requireを使うときの注意</h3>\n<p><code class=\"language-text\">require()</code>に指定できるのは文字列のみなので、変数を代入したり、文字連結合したりするとエラーになります。</p>\n<h4>エラーサンプル</h4>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> imagePath <span class=\"token operator\">=</span> <span class=\"token string\">'./assets/xxx.png'</span>\n<span class=\"token operator\">&lt;</span>Image\n  source<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span>imagePath<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n<span class=\"token operator\">/</span><span class=\"token operator\">></span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> imageName <span class=\"token operator\">=</span> <span class=\"token string\">'xxx'</span>\n<span class=\"token operator\">&lt;</span>Image\n  source<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">./assets/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span> imageName <span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">.png</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n<span class=\"token operator\">/</span><span class=\"token operator\">></span></code></pre></div>\n<h2>画像の縦横比率の変更</h2>\n<h3>resizeModeプロパティを指定する</h3>\n<h4>cover</h4>\n<ul>\n<li>縦横比は維持する</li>\n<li>width、heightの大きい数値に合わせて画像をリサイズする</li>\n</ul>\n<h4>contain</h4>\n<ul>\n<li>縦横比は維持する</li>\n<li>width、heightの小さい数値に合わせて画像をリサイズする</li>\n</ul>\n<h4>stretch</h4>\n<ul>\n<li>縦横比は維持しない</li>\n<li>width、heightの数値に合わせて画像をリサイズする</li>\n</ul>\n<h3>デモ</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> width<span class=\"token operator\">:</span> <span class=\"token number\">300</span><span class=\"token punctuation\">,</span> height<span class=\"token operator\">:</span> <span class=\"token number\">200</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code></pre></div>\n<img src=\"/static/d856743fc8e1051cc8690c0244fe859c/003.png\" width=\"300\" alt=\"\">\n<h1>アイコンを表示しよう</h1>\n<h2>react-native-vector-icons</h2>\n<p><a href=\"https://github.com/oblador/react-native-vector-icons\" target=\"_blank\" rel=\"noopener noreferrer\">github</a></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ yarn add react-native-vector-icons</code></pre></div>\n<h3>iOS</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">cd ios/\n$ pod install</code></pre></div>\n<p><code class=\"language-text\">ios/[ PROJECT_NAME ]/Info.plist</code>に以下を追記する。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>key<span class=\"token operator\">></span>UIAppFonts<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>key<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>array<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span>AntDesign<span class=\"token punctuation\">.</span>ttf<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>string<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span>Entypo<span class=\"token punctuation\">.</span>ttf<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>string<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span>EvilIcons<span class=\"token punctuation\">.</span>ttf<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>string<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span>Feather<span class=\"token punctuation\">.</span>ttf<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>string<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span>FontAwesome<span class=\"token punctuation\">.</span>ttf<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>string<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span>FontAwesome5_Brands<span class=\"token punctuation\">.</span>ttf<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>string<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span>FontAwesome5_Regular<span class=\"token punctuation\">.</span>ttf<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>string<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span>FontAwesome5_Solid<span class=\"token punctuation\">.</span>ttf<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>string<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span>Foundation<span class=\"token punctuation\">.</span>ttf<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>string<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span>Ionicons<span class=\"token punctuation\">.</span>ttf<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>string<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span>MaterialIcons<span class=\"token punctuation\">.</span>ttf<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>string<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span>MaterialCommunityIcons<span class=\"token punctuation\">.</span>ttf<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>string<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span>SimpleLineIcons<span class=\"token punctuation\">.</span>ttf<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>string<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span>Octicons<span class=\"token punctuation\">.</span>ttf<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>string<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span>Zocial<span class=\"token punctuation\">.</span>ttf<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>string<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span>Fontisto<span class=\"token punctuation\">.</span>ttf<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>string<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>array<span class=\"token operator\">></span></code></pre></div>\n<p>Xcodeで<code class=\"language-text\">Info.plist</code>から手動で追加することもできる。<br>\n+ボタンから<code class=\"language-text\">Fonts provided by application</code>でkeyを追加。<br>\n追加したいフォント名を追加する。</p>\n<img src=\"/static/6aa72c0263e4fdf596a54a513231d1c0/001.png\" width=\"500\" alt=\"Xcodeで手動で追加\">\n<h3>Android</h3>\n<p><code class=\"language-text\">android/app/build.gradle</code>に以下を追記する。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">apply <span class=\"token keyword\">from</span><span class=\"token operator\">:</span> <span class=\"token string\">\"../../node_modules/react-native-vector-icons/fonts.gradle\"</span></code></pre></div>\n<p><a href=\"https://oblador.github.io/react-native-vector-icons/\" target=\"_blank\" rel=\"noopener noreferrer\">アイコン一覧</a></p>\n<h2>演習</h2>\n<h3>Slackのプロフィールを模倣する</h3>\n<img src=\"/static/6e77f856d345bf63bf19df54c7f6e47e/002.gif\" width=\"250\" alt=\"Slackのプロフィールを模倣する\">","fields":{"slug":"/post/4"},"frontmatter":{"title":"第3回 React Native -画像を表示してみよう-","date":"2020/11/05","tags":["React Native"]}}},"pageContext":{"prev":{"html":"<h1>イベントをつける</h1>\n<p>React.jsでは、<code class=\"language-text\">onClick</code>とかとか使っていたかと思います。（<a href=\"https://ja.reactjs.org/docs/events.html\" target=\"_blank\" rel=\"noopener noreferrer\">他にも</a>）\nReact Nativeでは<code class=\"language-text\">onPress</code>を使います。\nReact.jsの場合は、Dom要素に<code class=\"language-text\">onClick</code>を指定すればイベントを付与することができました。が、React Nativeでは<code class=\"language-text\">Button</code>と<code class=\"language-text\">Text</code>、<code class=\"language-text\">Pressable</code>コンポーネントのみにしかありません。\n<em>※ v0.63から新しく<a href=\"https://reactnative.dev/docs/pressable\" target=\"_blank\" rel=\"noopener noreferrer\"><code class=\"language-text\">Pressable</code></a>コンポーネントが追加されました。</em></p>\n<div class=\"gatsby-highlight\" data-language=\"js:title=ok\"><pre class=\"language-js:title=ok\"><code class=\"language-js:title=ok\">&lt;Button onPress={ () =&gt; { console.log(&#39;hoge&#39;) } } title=&quot;button&quot; /&gt;\n&lt;Text onPress={ () =&gt; { console.log(&#39;hoge&#39;) } }&gt;button&lt;/Text&gt;</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js:title=ng\"><pre class=\"language-js:title=ng\"><code class=\"language-js:title=ng\">&lt;View onPress={ () =&gt; { console.log(&#39;hoge&#39;) } }&gt;\n  &lt;Text&gt;button&lt;/Text&gt;\n&lt;/View&gt;\n&lt;Image\n  onPress={ () =&gt; { console.log(&#39;hoge&#39;) } }\n  ...\n/&gt;</code></pre></div>\n<h3>Button</h3>\n<p><a href=\"https://reactnative.dev/docs/button\" target=\"_blank\" rel=\"noopener noreferrer\">https://reactnative.dev/docs/button</a></p>\n<h3>Text</h3>\n<p><a href=\"https://reactnative.dev/docs/text\" target=\"_blank\" rel=\"noopener noreferrer\">https://reactnative.dev/docs/text</a></p>\n<h3>Pressable</h3>\n<p><a href=\"https://reactnative.dev/docs/pressable\" target=\"_blank\" rel=\"noopener noreferrer\">https://reactnative.dev/docs/pressable</a></p>\n<h2>他にもないの？</h2>\n<p>あります。\nリストの親コンポーネントに<code class=\"language-text\">Button</code>は使いませんよね？<code class=\"language-text\">View</code>を使うと思います。</p>\n<div class=\"gatsby-code-title\">こんな感じで</div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>View style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span> styles<span class=\"token punctuation\">.</span>list <span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>View style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span> styles<span class=\"token punctuation\">.</span>listItem <span class=\"token punctuation\">}</span> onPress<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>Text<span class=\"token operator\">></span>リスト<span class=\"token number\">1</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Text<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>View<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>View onPress<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>Text<span class=\"token operator\">></span>リスト<span class=\"token number\">2</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Text<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>View<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>View<span class=\"token operator\">></span></code></pre></div>\n<p>ただ、<code class=\"language-text\">View</code>コンポーネントにはonPressプロパティは存在しないので、いくらタップしてもイベントは発火しません。\nそんな時、、、\nReact Nativeでは、<code class=\"language-text\">TouchableHighlight</code>や<code class=\"language-text\">TouchableOpacity</code>、<code class=\"language-text\">Touchablewithoutfeedback</code>コンポーネントが用意されている。用途に合わせて、それぞれのコンポーネントを使いわて使いましょう。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>View style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span> styles<span class=\"token punctuation\">.</span>list <span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>TouchableOpacity style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span> styles<span class=\"token punctuation\">.</span>listItem <span class=\"token punctuation\">}</span> onPress<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>Text<span class=\"token operator\">></span>リスト<span class=\"token number\">1</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Text<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>TouchableOpacity<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>TouchableOpacity onPress<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>Text<span class=\"token operator\">></span>リスト<span class=\"token number\">2</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Text<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>TouchableOpacity<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>View<span class=\"token operator\">></span></code></pre></div>\n<h2>ViewでTouchableXxxxxを囲わなくても大丈夫なの？</h2>\n<p>TouchableOpacity、TouchableHighlight、Touchablewithoutfeedbackは、<code class=\"language-text\">Animated.View</code>でwrapされています。</p>\n<div class=\"gatsby-code-title\">node_modules/react-native/Libraries/Components/Touchable/TouchableOpacity.js</div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// ...省略</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span>Node <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// BACKWARD-COMPATIBILITY: Focus and blur events were never supported before</span>\n    <span class=\"token comment\">// adopting `Pressability`, so preserve that behavior.</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n      onBlur<span class=\"token punctuation\">,</span>\n      onFocus<span class=\"token punctuation\">,</span>\n      <span class=\"token operator\">...</span>eventHandlersWithoutBlurAndFocus\n    <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>pressability<span class=\"token punctuation\">.</span><span class=\"token function\">getEventHandlers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>Animated<span class=\"token punctuation\">.</span>View\n        <span class=\"token comment\">// ...省略</span>\n        <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Animated<span class=\"token punctuation\">.</span>View<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// ...省略</span></code></pre></div>\n<p><code class=\"language-text\">Animated.View</code>を見てみると、</p>\n<div class=\"gatsby-highlight\" data-language=\"js:title=node_modules/react-native/libraries/animated/src/components/animatedview.js\"><pre class=\"language-js:title=node_modules/react-native/libraries/animated/src/components/animatedview.js\"><code class=\"language-js:title=node_modules/react-native/libraries/animated/src/components/animatedview.js\">import * as React from &#39;react&#39;;\nconst View = require(&#39;../../../Components/View/View&#39;);\nconst createAnimatedComponent = require(&#39;../createAnimatedComponent&#39;);\nimport type {AnimatedComponentType} from &#39;../createAnimatedComponent&#39;;\nmodule.exports = (createAnimatedComponent(View): AnimatedComponentType&lt;\n  React.ElementConfig&lt;typeof View&gt;,\n  React.ElementRef&lt;typeof View&gt;,\n&gt;);</code></pre></div>\n<p>わかりますね。Viewが使われてます。\nなので、TouchableXxxxxはViewでwrapしなくても大丈夫です。</p>\n<h2>各TouchableXxxxxコンポーネントの特徴</h2>\n<h3>TouchableHighlight</h3>\n<p><a href=\"https://reactnative.dev/docs/touchablehighlight\" target=\"_blank\" rel=\"noopener noreferrer\">https://reactnative.dev/docs/touchablehighlight</a></p>\n<ul>\n<li>wrapされた要素が（タップ時）ハイライトされる</li>\n<li>\n<p>ハイライトの詳細設定が可能（ドキュメント見てね）</p>\n<h3>TouchableOpacity</h3>\n<p><a href=\"https://reactnative.dev/docs/touchableopacity\" target=\"_blank\" rel=\"noopener noreferrer\">https://reactnative.dev/docs/touchableopacity</a></p>\n</li>\n<li>wrapされた要素が（タップ時）透過される</li>\n<li>\n<p>透過の詳細設定が可能（ドキュメント見てね）</p>\n<h3>Touchablewithoutfeedback</h3>\n<p><a href=\"https://reactnative.dev/docs/touchablewithoutfeedback\" target=\"_blank\" rel=\"noopener noreferrer\">https://reactnative.dev/docs/touchablewithoutfeedback</a></p>\n</li>\n<li>\n<p>イベントの付与のみ</p>\n<h2>TouchableXxxxxはonPressだけじゃない</h2>\n<p><code class=\"language-text\">Button</code>コンポーネントは<code class=\"language-text\">onPress</code>しかプロパティを持ちません。\nしかし、TouchableXxxxxは、<code class=\"language-text\">onPress</code>の他に、<code class=\"language-text\">onPressIn</code>タップされた時、<code class=\"language-text\">onPressOut</code>タップが外れた時にそれぞれ発火します。</p>\n<h2>発火される順番は？</h2>\n<p><code class=\"language-text\">onPressIn</code>→<code class=\"language-text\">onPressOut</code>→<code class=\"language-text\">onPress</code>の順です。</p>\n<h2>デバッグ方法は？</h2>\n<p>jsと同様<code class=\"language-text\">console.log</code>や<code class=\"language-text\">alert</code>を使うことで、logを出力することができる。</p>\n</li>\n</ul>\n<h1>ノッチ対応</h1>\n<p>2018年7月から、アップデートされるすべてのiOSアプリがノッチ対応を必須としなければならなくなりました。\nReact Nativeでは、<code class=\"language-text\">SafeAreaView</code>コンポーネントが用意されているのでSafeAreaViewを使い対応していきます。</p>\n<h2>SafeAreaViewって？</h2>\n<p>SafeAreaViewはiOSバージョン11以降(iPhone X以降)のデバイスのみに適用され、Androidの場合は適応されません。</p>\n<!-- もしAndroidにも対応させたい場合は`Platform.OS`でOSの判定をする必要があります。\n```js\nconst styles = StyleSheet.create({\n  androidSafeAreaView: {\n    …,\n    paddingTop: Platform.OS === 'android' ? 25 : 0\n  }\n})\n…\nreturn (\n  <SafeAreaView style={ styles.androidSafeAreaView }>\n    …\n  </SafeAreaView>\n)\n…\n``` -->\n<p>iPhone11（14.1）、iPhone8（14.1）、Android端末で下記のレイアウトを確認してみましょう。</p>\n<ol>\n<li>ノッチ対応なし</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">…\n<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>View style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> backgroundColor<span class=\"token operator\">:</span> <span class=\"token string\">'orange'</span><span class=\"token punctuation\">,</span> flex<span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>View style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> width<span class=\"token operator\">:</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> height<span class=\"token operator\">:</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> backgroundColor<span class=\"token operator\">:</span> <span class=\"token string\">'blue'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>View<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span>\n…</code></pre></div>\n<img src=\"/static/5553f8b7e1047517fadbb83c66c46bf7/001.png\" width=\"250\" alt=\"ノッチ対応なし\">\n<ol start=\"2\">\n<li>\n<p>ノッチ対応あり</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">…\n<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n<span class=\"token operator\">&lt;</span>SafeAreaView style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> flex<span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>View style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> backgroundColor<span class=\"token operator\">:</span> <span class=\"token string\">'orange'</span><span class=\"token punctuation\">,</span> flex<span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>View style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> width<span class=\"token operator\">:</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> height<span class=\"token operator\">:</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> backgroundColor<span class=\"token operator\">:</span> <span class=\"token string\">'blue'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>View<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>SafeAreaView<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span>\n…</code></pre></div>\n<img src=\"/static/f9ba4769f654a1a1b739fe638d03ddb2/002.png\" width=\"250\" alt=\"ノッチ対応あり\">\n</li>\n</ol>","fields":{"slug":"/post/5"},"frontmatter":{"date":"2020-11-12","title":"第4回 React Native -イベント・ノッチ-","tags":["React Native"],"active":1}},"next":{"html":"<h1>環境構築</h1>\n<p>これは問題ないかな</p>\n<h1>環境変数（react-native-config）</h1>\n<h2>導入</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ yarn add react-native-config</code></pre></div>\n<p>iOSは<code class=\"language-text\">pod install</code>する。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">cd ios/\npod install</code></pre></div>\n<h2>環境毎の設定ファイルの追加</h2>\n<h3>本番</h3>\n<div class=\"gatsby-code-title\">.env</div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token constant\">ENV</span><span class=\"token operator\">=</span>prod</code></pre></div>\n<h3>開発</h3>\n<div class=\"gatsby-code-title\">.env.dev</div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token constant\">ENV</span><span class=\"token operator\">=</span>dev</code></pre></div>\n<h2>OS毎の設定</h2>\n<h3>iOS</h3>\n<h2>Configurationの追加</h2>\n<p><code class=\"language-text\">PROJECT &gt; [ PROJECT_NAME ] &gt; Configurations</code>の+ボタンをクリックして「Duplicate \"Release\" Configurations」を選択し、Nameをつける。(Stagingとかとか)</p>\n<h2>環境毎の設定</h2>\n<h3>アプリ名</h3>\n<p>アプリ名をプレフィックスをつけて区別する。</p>\n<p><code class=\"language-text\">TARGETS &gt; [ PROJECT_NAME ] &gt; Build Settings</code>のタブで<code class=\"language-text\">All</code>と<code class=\"language-text\">Combined</code>が選択されている状態にする。+ボタンから「Add User-Defined Setting」を選択し、<code class=\"language-text\">PROJECT_NAME_PREFIX</code>という名前で作成。任意の環境毎で区別できるように値を設定する。</p>\n<p><code class=\"language-text\">Packaging</code>の<code class=\"language-text\">Product Name</code>で値の先頭に<code class=\"language-text\">${PRODUCT_NAME_PREFIX}</code>を入力する。</p>\n<p><code class=\"language-text\">TARGETS &gt; [ PROJECT_NAME ] &gt; Info</code>の<code class=\"language-text\">Custome iOS Target Properties</code>で「Bundle display name」の値を<code class=\"language-text\">${PRODUCT_NAME}</code>と設定する。\n<em>※ 「Bundle display name」がない場合は追加してください</em></p>\n<h3>バンドルID</h3>\n<p>バンドルIDをサフィックスをつけて区別する。</p>\n<p>アプリ名同様、<code class=\"language-text\">BUNDLE_ID_SUFFIX</code>という名前で作成し、環境毎で区別できるように値を設定する。</p>\n<p><code class=\"language-text\">Packaging</code>の<code class=\"language-text\">Product Bundle Identifier</code>で値の末尾に<code class=\"language-text\">${BUNDLE_ID_SUFFIX}</code>を入力する。</p>\n<h3>Android</h3>\n<p>build.gradleに以下を追記</p>\n<div class=\"gatsby-code-title\">android/app/build.gradle</div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">apply <span class=\"token keyword\">from</span><span class=\"token operator\">:</span> <span class=\"token function\">project</span><span class=\"token punctuation\">(</span><span class=\"token string\">':react-native-config'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>projectDir<span class=\"token punctuation\">.</span><span class=\"token function\">getPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"/dotenv.gradle\"</span></code></pre></div>\n<h2>環境毎に切り替え</h2>\n<h3>iOS</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ ENVFILE=.env.dev npx react-native run-ios</code></pre></div>\n<h3>Android</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ ENVFILE=.env.dev npx react-native run-android</code></pre></div>\n<p>build.gradleに以下を追記</p>\n<div class=\"gatsby-code-title\">android/app/build.gradle</div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">project<span class=\"token punctuation\">.</span>ext<span class=\"token punctuation\">.</span>envConfigFiles <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  debug<span class=\"token operator\">:</span> <span class=\"token string\">\".env.dev\"</span><span class=\"token punctuation\">,</span>\n  staging<span class=\"token operator\">:</span> <span class=\"token string\">\".env.stg\"</span><span class=\"token punctuation\">,</span>\n  release<span class=\"token operator\">:</span> <span class=\"token string\">\".env\"</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ npx react-native run-android --variant=staging</code></pre></div>\n<h1>[iOS]実機ビルド</h1>\n<h2>Xcodeの起動</h2>\n<p><code class=\"language-text\">ios/${ PROJECT_NAME }.xcworkspace</code>でXcodeを起動させる。</p>\n<h2>Team設定</h2>\n<p><code class=\"language-text\">TARGETS &gt; [ PROJECT_NAME ] &gt; Signing&amp;Capabilities &gt; Signing &gt; Team</code></p>\n<p>自分のアカウント名に変更</p>\n<h2>Nodeのバイナリのパスを変更</h2>\n<h3>パスの確認</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ which node</code></pre></div>\n<p><code class=\"language-text\">TARGETS &gt; [ PROJECT_NAME ] &gt; Build Phases &gt; Bundel React Native code and image</code></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">export NODE_BINARY=node</code></pre></div>\n<p><code class=\"language-text\">node</code>部分を確認したパスに変更する。</p>\n<h2>ビルド</h2>\n<p>Deviceを自分の端末に選択して実行</p>\n<h2>プロファイルとデバイス管理</h2>\n<p><code class=\"language-text\">設定 &gt; 一般 &gt; プロファイルとデバイス管理</code></p>\n<h1>[Android]実機ビルド</h1>\n<p><em><a href=\"https://reactnative.dev/docs/running-on-device\" target=\"_blank\" rel=\"noopener noreferrer\">※ 公式ドキュメント通り</a></em></p>\n<h2>USB経由のデバッグを有効にする</h2>\n<p>端末の開発者向けオプションから「USBデバッグ」を有効にしてください。</p>\n<h2>USB経由でデバイスを接続</h2>\n<p>デバイスの疎通確認</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ adb devices\nList of devices attached\nemulator-5554 offline   # Google emulator\n14ed2fcc device         # Physical device</code></pre></div>\n<h2>ビルド</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ npx react-native run-android</code></pre></div>\n<!-- 一旦なしでいいかな -->\n<!--\n## ビルドバリアントの設定\n\n### ビルドバリアント（Build Variant）とは\n\n2つの要素の組み合わせから構成される。\n\n- ビルドタイプ（BuildType）\n- プロダクトフレーバー（Product Flavor）\n\n||debug|release|\n|---|---|---|\n|dev||devDebug|devRelease|\n|prod|prodDebug|prodRelease|\n-->","fields":{"slug":"/post/1"},"frontmatter":{"date":"2020-10-29","title":"【解説】第1回 React Native -環境を整えよう-","tags":["React Native"],"active":1}}}},"staticQueryHashes":["63159454"]}