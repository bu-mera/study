{"componentChunkName":"component---src-templates-post-js","path":"/post/8","result":{"data":{"markdownRemark":{"html":"<h1>アプリの共有</h1>\n<p>作成したアプリを共有するための方法です。</p>\n<p>AndroidアプリをDeploygate、iOSアプリをTestFlightを用いて共有しています。</p>\n<h2>Deploygate</h2>\n<h3><a href=\"https://github.com/DeployGate/gradle-deploygate-plugin/blob/master/README_JP.md\" target=\"_blank\" rel=\"noopener noreferrer\">Gradle DeployGate Plugin</a> の導入</h3>\n<p>android/build.gradle</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">buildscript {\n    …\n    repositories {\n        …\n        jcenter()\n    }\n    dependencies {\n        …\n        classpath &#39;com.deploygate:gradle:2.3.0&#39;\n    }\n}</code></pre></div>\n<p>android/app/build.gradle</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">apply plugin: &#39;com.android.application&#39;\napply plugin: &#39;deploygate&#39;\n…\n\nandroid {\n  …\n  deploygate {\n    appOwnerName = &#39;……………&#39;\n    apiToken = &#39;……………&#39;\n  }\n}</code></pre></div>\n<h3>アップロード</h3>\n<p>staging環境の場合の例</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ cd android\n$ ENVFILE=../.env.stg ./gradlew clean uploadDeployGateStaging</code></pre></div>\n<p>また、Deploygateにapkファイルを直接アップロードすることもできます。</p>\n<h3>配布ページの作成</h3>\n<p>アプリのアップロード後、共有用の配布ページを作成します。</p>\n<p>アプリ詳細画面に遷移し、<code class=\"language-text\">共有用のリンクの追加</code>を選択すると、共有用のページが作成されます。</p>\n<img src=\"/static/6489d13d97770c55f71d4188d0a29d36/and001.png\" width=\"400\">\n<p>配布ページ下部に表示されているQRコードやURLを共有することで、アプリの配布ができます。</p>\n<img src=\"/static/eec37950bd6cc47ad6d3dcc2bbdcb238/and002.png\" width=\"400\">\n<p>また、配布ページ内の<code class=\"language-text\">配布ページの設定</code>に遷移することで、配布ページの無効化や公開範囲の設定ができます。</p>\n<h3>配布ページの更新</h3>\n<p>配布ページ作成後にビルドを更新する際、このままの設定では配布ページ上のビルドは更新されないので、android/app/build.gradle に追記する必要があります。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">android {\n  …\n  deploygate {\n    …\n    deployments {\n      staging {\n        distribution {\n          key = &quot;……………&quot;\n        }\n      }\n    }\n  }\n}</code></pre></div>\n<p>keyには配布ページのURLの後ろに付いている文字列（今回の場合はd576ca90a163bd8b92358952655ab29454a08d4b）を設定します。</p>\n<h2>TestFlight</h2>\n<p><a href=\"https://i-app-tec.com/ios/app-upload.html\" target=\"_blank\" rel=\"noopener noreferrer\">アプリ申請のためXcodeでアップロードする</a></p>\n<h3>ビルドの準備</h3>\n<p><a href=\"https://shigu493.com/%E3%80%90ios%E3%80%91%E8%A4%87%E9%9B%91%E3%81%AA%E8%A8%BC%E6%98%8E%E6%9B%B8%E5%91%A8%E3%82%8A%E3%82%92%E3%81%82%E3%81%A3%E3%81%95%E3%82%8A%E6%95%B4%E7%90%86/\" target=\"_blank\" rel=\"noopener noreferrer\">証明書周りのまとめ</a></p>\n<h4>証明書の取得</h4>\n<p><a href=\"https://developer.apple.com/account/resources/certificates/list\" target=\"_blank\" rel=\"noopener noreferrer\">https://developer.apple.com/account/resources/certificates/list</a></p>\n<h4>IDの登録</h4>\n<p><a href=\"https://developer.apple.com/account/resources/identifiers/list\" target=\"_blank\" rel=\"noopener noreferrer\">https://developer.apple.com/account/resources/identifiers/list</a></p>\n<h4>Provisioning Profileの作成</h4>\n<p><a href=\"https://developer.apple.com/account/resources/profiles/list\" target=\"_blank\" rel=\"noopener noreferrer\">https://developer.apple.com/account/resources/profiles/list</a></p>\n<p>作成したProvisioning ProfileはXcodeのTargets > Signing&#x26;Capabilitiesから対象のビルド環境へ反映します。</p>\n<img src=\"/static/5ca181f47f31c40f3551979195d62e9b/iOS008.png\" width=\"400\">\n<h3>App Store Connectへのアプリの登録</h3>\n<!-- App Store Connectにアプリを作成します。 -->\n<p>App Store Connectにログイン後、<code class=\"language-text\">マイApp</code>を選択します。</p>\n<img src=\"/static/4cf42e52db8fef06fa70403d6556bcdc/iOS001.png\" width=\"400\">\n<p>左上の<code class=\"language-text\">App</code>の右にある<code class=\"language-text\">+</code>ボタンから<code class=\"language-text\">新規 App</code>を選択します。</p>\n<img src=\"/static/eb7ea45caf765795ad31bf57e33e9155/iOS002.png\" width=\"400\">\n<img src=\"/static/7936a785591e434d8f50f95388605795/iOS003.png\" width=\"400\">\n<p>アップロードしたいアプリ用のバンドルIDを選択します。</p>\n<h3>内部テスターへの共有</h3>\n<p>内部テスターとして追加したいアカウントを<a href=\"https://appstoreconnect.apple.com/access/users\" target=\"_blank\" rel=\"noopener noreferrer\">ユーザとアクセス</a>で作成しておき、共有したいアプリをアクセス可能にしておきます。</p>\n<p>その後、<code class=\"language-text\">内部グループ</code>の<code class=\"language-text\">App Store Connectユーザ</code>を選択し、アプリを共有したいユーザをテスターに追加していきます。</p>\n<h3>アプリのビルド</h3>\n<p>Xcodeを起動し、上部メニューの<code class=\"language-text\">Product</code> > <code class=\"language-text\">Archive</code>を選択します。</p>\n<img src=\"/static/a3af710636e225acc2ce823f6a6a3174/iOS004.png\" width=\"400\">\n<p>ビルドに成功すると、<code class=\"language-text\">Organizer</code>という名前のウィンドウが自動的に表示されます。</p>\n<h3>アプリのアップロード</h3>\n<p><code class=\"language-text\">Organizer</code>ウィンドウ（上部メニューの Window > Organizer でも表示可能）で、アップロードしたいアプリを選択し、<code class=\"language-text\">Validate App</code>を選びます。</p>\n<p>いくつか確認事項が出てきますので指示に沿って進めます。</p>\n<p>最後に<code class=\"language-text\">Validate</code>ボタンを選択し、完了すると完了画面が表示されます。</p>\n<p>次に、<code class=\"language-text\">Distribute App</code>を選びます。</p>\n<p>こちらも同様にいくつか確認事項が出てきますので指示に沿って進めます。</p>\n<p>最後に<code class=\"language-text\">Upload</code>ボタンを選択し、完了すると完了画面が表示されます。</p>\n<p>これでXcode上でのApp Store Connectへのアップロード作業は完了です。</p>\n<h3>アプリの共有準備</h3>\n<p>App Store Connectにアップロードされていることを確認します。\nアップロード直後は<code class=\"language-text\">処理中</code>というステータスですが、しばらくするとステータスが更新されます。</p>\n<p><code class=\"language-text\">提出準備完了</code>というステータスになれば、あとはテスターに共有するだけです。</p>\n<p><code class=\"language-text\">輸出コンプライアンスがありません</code>というステータスであれば、別途対応が必要です。</p>\n<p><a href=\"https://help.apple.com/app-store-connect/#/dev88f5c7bf9\" target=\"_blank\" rel=\"noopener noreferrer\">輸出コンプライアンスの概要</a>\n<a href=\"https://tommy10344.hatenablog.com/entry/2020/04/29/025809\" target=\"_blank\" rel=\"noopener noreferrer\">「輸出コンプライアンスがありません」と表示しない方法</a></p>\n<h2>ビルドの更新</h2>\n<p>ビルドの更新をする際、ビルドバージョンを変更する必要があります。</p>\n<h3>Android</h3>\n<p>android/app/build.gradle</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">android {\n  …\n  defaultConfig {\n    …\n    versionCode 1\n    …\n  }\n  …\n}</code></pre></div>\n<h3>iOS</h3>\n<p>TARGETS > [ PROJECT_NAME ] > General > Identify > Build</p>\n<img src=\"/static/daa1f239484299af5619acfa68010ddc/iOS007.png\" width=\"400\">","fields":{"slug":"/post/8"},"frontmatter":{"title":"第7回 React Native -アプリの共有-","date":"2020/12/03","tags":["React Native"]}}},"pageContext":{"prev":{"html":"<h1>プッシュ通知</h1>\n<p>FirebaseのFirebase Cloud Messaging（FCM）を使用します。</p>\n<h2>導入</h2>\n<p>実装には <a href=\"https://rnfirebase.io/\" target=\"_blank\" rel=\"noopener noreferrer\">REACT NATIVE FIREBASE（v6）</a> の <a href=\"https://rnfirebase.io/messaging/usage\" target=\"_blank\" rel=\"noopener noreferrer\">Cloud Messaging</a> を使用します。</p>\n<!-- ただ、ローカル通知に関してはv6ではサポート外なので、ローカル通知の実装には別途対応が必要です。 -->\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ yarn add @react-native-firebase/app @react-native-firebase/messaging\n$ npx pod-install ios</code></pre></div>\n<h2>Firebaseプロジェクトの準備</h2>\n<h2>アプリの登録</h2>\n<p>AndroidとiOSそれぞれで登録します。</p>\n<p>登録後、Androidでは<code class=\"language-text\">google-services.json</code>、\niOSでは<code class=\"language-text\">GoogleService-Info.plist</code>をダウンロードします。</p>\n<h2>Android</h2>\n<p><a href=\"https://gibachansblog.hatenablog.jp/entry/2020/08/14/051052\" target=\"_blank\" rel=\"noopener noreferrer\">参考サイト</a></p>\n<h3>firebaseの導入</h3>\n<p><code class=\"language-text\">/android/app</code>に<code class=\"language-text\">google-services.json</code>を配置します。</p>\n<p><code class=\"language-text\">/android/build.gradle</code></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">buildscript {\n    ...\n    dependencies {\n        ...\n        classpath &#39;com.google.gms:google-services:4.3.3&#39; // これを追加\n    }\n}</code></pre></div>\n<p><code class=\"language-text\">/android/app/build.gradle</code></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">apply plugin: &#39;com.google.gms.google-services&#39; // これを追加</code></pre></div>\n<h3><a href=\"https://qiita.com/myzkyy/items/4c286c3d096c5aaa2b3c\" target=\"_blank\" rel=\"noopener noreferrer\">通知チャネル</a></h3>\n<p>Android 8.0（API レベル 26）以降、通知はすべてチャネルに割り当てる必要があります。<br>\n<a href=\"https://developer.android.com/training/notify-user/channels?hl=ja\" target=\"_blank\" rel=\"noopener noreferrer\">公式ドキュメント</a></p>\n<p><code class=\"language-text\">android/app/src/〜/MainActivity.java</code></p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">android<span class=\"token punctuation\">.</span>app<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">NotificationChannel</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">android<span class=\"token punctuation\">.</span>app<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">NotificationManager</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">android<span class=\"token punctuation\">.</span>os<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Build</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MainActivity</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ReactActivity</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">createNotificationChannel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Build</span><span class=\"token punctuation\">.</span>VERSION<span class=\"token punctuation\">.</span>SDK_INT <span class=\"token operator\">>=</span> <span class=\"token class-name\">Build</span><span class=\"token punctuation\">.</span>VERSION_CODES<span class=\"token punctuation\">.</span><span class=\"token class-name\">O</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token class-name\">String</span> id <span class=\"token operator\">=</span> <span class=\"token string\">\"notification\"</span><span class=\"token punctuation\">;</span>\n      <span class=\"token class-name\">CharSequence</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"お知らせ\"</span><span class=\"token punctuation\">;</span>\n      <span class=\"token class-name\">String</span> description <span class=\"token operator\">=</span> <span class=\"token string\">\"新しいメッセージの受信などをお知らせするよ\"</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">int</span> importance <span class=\"token operator\">=</span> <span class=\"token class-name\">NotificationManager</span><span class=\"token punctuation\">.</span>IMPORTANCE_HIGH<span class=\"token punctuation\">;</span>\n      <span class=\"token class-name\">NotificationChannel</span> channel <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NotificationChannel</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> importance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      channel<span class=\"token punctuation\">.</span><span class=\"token function\">setDescription</span><span class=\"token punctuation\">(</span>description<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token class-name\">NotificationManager</span> notificationManager <span class=\"token operator\">=</span> <span class=\"token function\">getSystemService</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">NotificationManager</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      notificationManager<span class=\"token punctuation\">.</span><span class=\"token function\">createNotificationChannel</span><span class=\"token punctuation\">(</span>channel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token annotation punctuation\">@Override</span>\n  <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Bundle</span> savedInstanceState<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token function\">createNotificationChannel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">firebase.json</code></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">{\n  &quot;react-native&quot;: {\n    ...\n    &quot;messaging_android_notification_channel_id&quot;: &quot;notification&quot;\n  }\n}</code></pre></div>\n<h2>iOS</h2>\n<p><a href=\"https://gibachansblog.hatenablog.jp/entry/2020/08/15/095114\" target=\"_blank\" rel=\"noopener noreferrer\">参考サイト</a></p>\n<h3>APNs証明書の登録</h3>\n<h3>firebaseの導入</h3>\n<p><code class=\"language-text\">AppDelegate.m</code></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">#import &lt;Firebase.h&gt;\n…\n\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions\n{\n  …\n  if ([FIRApp defaultApp] == nil) {\n    [FIRApp configure];\n  }</code></pre></div>\n<h3>プッシュ通知の受信を許可</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">...</span>\n  <span class=\"token comment\">// 通知の許可をリクエストする</span>\n  <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">requestUserPermission</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> authStatus <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">messaging</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">requestPermission</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> enabled <span class=\"token operator\">=</span>\n      authStatus <span class=\"token operator\">===</span> messaging<span class=\"token punctuation\">.</span>AuthorizationStatus<span class=\"token punctuation\">.</span><span class=\"token constant\">AUTHORIZED</span> <span class=\"token operator\">||</span>\n      authStatus <span class=\"token operator\">===</span> messaging<span class=\"token punctuation\">.</span>AuthorizationStatus<span class=\"token punctuation\">.</span><span class=\"token constant\">PROVISIONAL</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>enabled<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'通知が許可されました'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 最初に通知の許可をリクエストする</span>\n    <span class=\"token function\">requestUserPermission</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token operator\">...</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>JS</h2>\n<h3>トークンの取得</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> token <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">messaging</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getToken</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3>通知時のハンドリング</h3>\n<p><code class=\"language-text\">index.js</code></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">...</span>\n<span class=\"token keyword\">import</span> messaging <span class=\"token keyword\">from</span> <span class=\"token string\">'@react-native-firebase/messaging'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// これを追加する</span>\n\n<span class=\"token comment\">// バックグラウンドで通知を受信</span>\n<span class=\"token function\">messaging</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setBackgroundMessageHandler</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token parameter\">remoteMessage</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">[</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>remoteMessage<span class=\"token punctuation\">.</span>notification<span class=\"token operator\">?.</span>title<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">]を受信しました</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nAppRegistry<span class=\"token punctuation\">.</span><span class=\"token function\">registerComponent</span><span class=\"token punctuation\">(</span>appName<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> App<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">App.js</code></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">...</span>\n<span class=\"token keyword\">import</span> messaging <span class=\"token keyword\">from</span> <span class=\"token string\">'@react-native-firebase/messaging'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// フォアグラウンドで通知を受信</span>\n    <span class=\"token keyword\">const</span> unsubscribe <span class=\"token operator\">=</span> <span class=\"token function\">messaging</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">onMessage</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token parameter\">remoteMessage</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">[</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>remoteMessage<span class=\"token punctuation\">.</span>notification<span class=\"token operator\">?.</span>title<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">]を受信しました</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> unsubscribe<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  …\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>アプリの状態</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Foreground</td>\n<td>アプリが前面にあり動作している状態</td>\n</tr>\n<tr>\n<td>Background</td>\n<td>ホーム画面や他のアプリが前面にあり、アプリが背面で動作している状態</td>\n</tr>\n<tr>\n<td>Quit</td>\n<td>タスクキルなどでアプリが死んでいる状態</td>\n</tr>\n</tbody>\n</table>\n<h2><a href=\"https://qiita.com/iwashi1t/items/517cda73dba715025b6c\" target=\"_blank\" rel=\"noopener noreferrer\">フォアグラウンドでのプッシュ通知表示</a></h2>\n<p><code class=\"language-text\">react-native-push-notification</code> を使用します。</p>\n<!-- \n```js\nPushNotification.configure({\n  onNotification: notification => {\n    // プッシュ通知をタップしたときに呼ばれる\n    // URLを開くなどの処理\n    notification.finish(PushNotificationIOS.FetchResult.NoData);\n    PushNotificationIOS.setApplicationIconBadgeNumber(0);\n  },\n});\n```\n -->\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">showNotification</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">remoteMessage</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  PushNotification<span class=\"token punctuation\">.</span><span class=\"token function\">localNotification</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      title<span class=\"token operator\">:</span> message<span class=\"token punctuation\">.</span>notification<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">,</span>\n      message<span class=\"token operator\">:</span> message<span class=\"token punctuation\">.</span>notification<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>[Android]通知アイコンの設定</h2>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">showNotification</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">remoteMessage</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  PushNotification<span class=\"token punctuation\">.</span><span class=\"token function\">localNotification</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      largeIcon<span class=\"token operator\">:</span> <span class=\"token string\">'largeIconName'</span><span class=\"token punctuation\">,</span>\n      smallIcon<span class=\"token operator\">:</span> <span class=\"token string\">'smallIconName'</span><span class=\"token punctuation\">,</span>\n      title<span class=\"token operator\">:</span> message<span class=\"token punctuation\">.</span>notification<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">,</span>\n      message<span class=\"token operator\">:</span> message<span class=\"token punctuation\">.</span>notification<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","fields":{"slug":"/post/9"},"frontmatter":{"date":"2020-12-10","title":"第8回 React Native -Firebase・プッシュ通知-","tags":["React Native"],"active":1}},"next":{"html":"<h1>イベントをつける</h1>\n<p>React.jsでは、<code class=\"language-text\">onClick</code>とかとか使っていたかと思います。（<a href=\"https://ja.reactjs.org/docs/events.html\" target=\"_blank\" rel=\"noopener noreferrer\">他にも</a>）\nReact Nativeでは<code class=\"language-text\">onPress</code>を使います。\nReact.jsの場合は、Dom要素に<code class=\"language-text\">onClick</code>を指定すればイベントを付与することができました。が、React Nativeでは<code class=\"language-text\">Button</code>と<code class=\"language-text\">Text</code>、<code class=\"language-text\">Pressable</code>コンポーネントのみにしかありません。\n<em>※ v0.63から新しく<a href=\"https://reactnative.dev/docs/pressable\" target=\"_blank\" rel=\"noopener noreferrer\"><code class=\"language-text\">Pressable</code></a>コンポーネントが追加されました。</em></p>\n<div class=\"gatsby-highlight\" data-language=\"js:title=ok\"><pre class=\"language-js:title=ok\"><code class=\"language-js:title=ok\">&lt;Button onPress={ () =&gt; { console.log(&#39;hoge&#39;) } } title=&quot;button&quot; /&gt;\n&lt;Text onPress={ () =&gt; { console.log(&#39;hoge&#39;) } }&gt;button&lt;/Text&gt;</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js:title=ng\"><pre class=\"language-js:title=ng\"><code class=\"language-js:title=ng\">&lt;View onPress={ () =&gt; { console.log(&#39;hoge&#39;) } }&gt;\n  &lt;Text&gt;button&lt;/Text&gt;\n&lt;/View&gt;\n&lt;Image\n  onPress={ () =&gt; { console.log(&#39;hoge&#39;) } }\n  ...\n/&gt;</code></pre></div>\n<h3>Button</h3>\n<p><a href=\"https://reactnative.dev/docs/button\" target=\"_blank\" rel=\"noopener noreferrer\">https://reactnative.dev/docs/button</a></p>\n<h3>Text</h3>\n<p><a href=\"https://reactnative.dev/docs/text\" target=\"_blank\" rel=\"noopener noreferrer\">https://reactnative.dev/docs/text</a></p>\n<h3>Pressable</h3>\n<p><a href=\"https://reactnative.dev/docs/pressable\" target=\"_blank\" rel=\"noopener noreferrer\">https://reactnative.dev/docs/pressable</a></p>\n<h2>他にもないの？</h2>\n<p>あります。\nリストの親コンポーネントに<code class=\"language-text\">Button</code>は使いませんよね？<code class=\"language-text\">View</code>を使うと思います。</p>\n<div class=\"gatsby-code-title\">こんな感じで</div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>View style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span> styles<span class=\"token punctuation\">.</span>list <span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>View style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span> styles<span class=\"token punctuation\">.</span>listItem <span class=\"token punctuation\">}</span> onPress<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>Text<span class=\"token operator\">></span>リスト<span class=\"token number\">1</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Text<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>View<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>View onPress<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>Text<span class=\"token operator\">></span>リスト<span class=\"token number\">2</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Text<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>View<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>View<span class=\"token operator\">></span></code></pre></div>\n<p>ただ、<code class=\"language-text\">View</code>コンポーネントにはonPressプロパティは存在しないので、いくらタップしてもイベントは発火しません。\nそんな時、、、\nReact Nativeでは、<code class=\"language-text\">TouchableHighlight</code>や<code class=\"language-text\">TouchableOpacity</code>、<code class=\"language-text\">Touchablewithoutfeedback</code>コンポーネントが用意されている。用途に合わせて、それぞれのコンポーネントを使いわて使いましょう。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>View style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span> styles<span class=\"token punctuation\">.</span>list <span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>TouchableOpacity style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span> styles<span class=\"token punctuation\">.</span>listItem <span class=\"token punctuation\">}</span> onPress<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>Text<span class=\"token operator\">></span>リスト<span class=\"token number\">1</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Text<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>TouchableOpacity<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>TouchableOpacity onPress<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>Text<span class=\"token operator\">></span>リスト<span class=\"token number\">2</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Text<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>TouchableOpacity<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>View<span class=\"token operator\">></span></code></pre></div>\n<h2>ViewでTouchableXxxxxを囲わなくても大丈夫なの？</h2>\n<p>TouchableOpacity、TouchableHighlight、Touchablewithoutfeedbackは、<code class=\"language-text\">Animated.View</code>でwrapされています。</p>\n<div class=\"gatsby-code-title\">node_modules/react-native/Libraries/Components/Touchable/TouchableOpacity.js</div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// ...省略</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span>Node <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// BACKWARD-COMPATIBILITY: Focus and blur events were never supported before</span>\n    <span class=\"token comment\">// adopting `Pressability`, so preserve that behavior.</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n      onBlur<span class=\"token punctuation\">,</span>\n      onFocus<span class=\"token punctuation\">,</span>\n      <span class=\"token operator\">...</span>eventHandlersWithoutBlurAndFocus\n    <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>pressability<span class=\"token punctuation\">.</span><span class=\"token function\">getEventHandlers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>Animated<span class=\"token punctuation\">.</span>View\n        <span class=\"token comment\">// ...省略</span>\n        <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Animated<span class=\"token punctuation\">.</span>View<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// ...省略</span></code></pre></div>\n<p><code class=\"language-text\">Animated.View</code>を見てみると、</p>\n<div class=\"gatsby-highlight\" data-language=\"js:title=node_modules/react-native/libraries/animated/src/components/animatedview.js\"><pre class=\"language-js:title=node_modules/react-native/libraries/animated/src/components/animatedview.js\"><code class=\"language-js:title=node_modules/react-native/libraries/animated/src/components/animatedview.js\">import * as React from &#39;react&#39;;\nconst View = require(&#39;../../../Components/View/View&#39;);\nconst createAnimatedComponent = require(&#39;../createAnimatedComponent&#39;);\nimport type {AnimatedComponentType} from &#39;../createAnimatedComponent&#39;;\nmodule.exports = (createAnimatedComponent(View): AnimatedComponentType&lt;\n  React.ElementConfig&lt;typeof View&gt;,\n  React.ElementRef&lt;typeof View&gt;,\n&gt;);</code></pre></div>\n<p>わかりますね。Viewが使われてます。\nなので、TouchableXxxxxはViewでwrapしなくても大丈夫です。</p>\n<h2>各TouchableXxxxxコンポーネントの特徴</h2>\n<h3>TouchableHighlight</h3>\n<p><a href=\"https://reactnative.dev/docs/touchablehighlight\" target=\"_blank\" rel=\"noopener noreferrer\">https://reactnative.dev/docs/touchablehighlight</a></p>\n<ul>\n<li>wrapされた要素が（タップ時）ハイライトされる</li>\n<li>\n<p>ハイライトの詳細設定が可能（ドキュメント見てね）</p>\n<h3>TouchableOpacity</h3>\n<p><a href=\"https://reactnative.dev/docs/touchableopacity\" target=\"_blank\" rel=\"noopener noreferrer\">https://reactnative.dev/docs/touchableopacity</a></p>\n</li>\n<li>wrapされた要素が（タップ時）透過される</li>\n<li>\n<p>透過の詳細設定が可能（ドキュメント見てね）</p>\n<h3>Touchablewithoutfeedback</h3>\n<p><a href=\"https://reactnative.dev/docs/touchablewithoutfeedback\" target=\"_blank\" rel=\"noopener noreferrer\">https://reactnative.dev/docs/touchablewithoutfeedback</a></p>\n</li>\n<li>\n<p>イベントの付与のみ</p>\n<h2>TouchableXxxxxはonPressだけじゃない</h2>\n<p><code class=\"language-text\">Button</code>コンポーネントは<code class=\"language-text\">onPress</code>しかプロパティを持ちません。\nしかし、TouchableXxxxxは、<code class=\"language-text\">onPress</code>の他に、<code class=\"language-text\">onPressIn</code>タップされた時、<code class=\"language-text\">onPressOut</code>タップが外れた時にそれぞれ発火します。</p>\n<h2>発火される順番は？</h2>\n<p><code class=\"language-text\">onPressIn</code>→<code class=\"language-text\">onPressOut</code>→<code class=\"language-text\">onPress</code>の順です。</p>\n<h2>デバッグ方法は？</h2>\n<p>jsと同様<code class=\"language-text\">console.log</code>や<code class=\"language-text\">alert</code>を使うことで、logを出力することができる。</p>\n</li>\n</ul>\n<h1>ノッチ対応</h1>\n<p>2018年7月から、アップデートされるすべてのiOSアプリがノッチ対応を必須としなければならなくなりました。\nReact Nativeでは、<code class=\"language-text\">SafeAreaView</code>コンポーネントが用意されているのでSafeAreaViewを使い対応していきます。</p>\n<h2>SafeAreaViewって？</h2>\n<p>SafeAreaViewはiOSバージョン11以降(iPhone X以降)のデバイスのみに適用され、Androidの場合は適応されません。</p>\n<!-- もしAndroidにも対応させたい場合は`Platform.OS`でOSの判定をする必要があります。\n```js\nconst styles = StyleSheet.create({\n  androidSafeAreaView: {\n    …,\n    paddingTop: Platform.OS === 'android' ? 25 : 0\n  }\n})\n…\nreturn (\n  <SafeAreaView style={ styles.androidSafeAreaView }>\n    …\n  </SafeAreaView>\n)\n…\n``` -->\n<p>iPhone11（14.1）、iPhone8（14.1）、Android端末で下記のレイアウトを確認してみましょう。</p>\n<ol>\n<li>ノッチ対応なし</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">…\n<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>View style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> backgroundColor<span class=\"token operator\">:</span> <span class=\"token string\">'orange'</span><span class=\"token punctuation\">,</span> flex<span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>View style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> width<span class=\"token operator\">:</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> height<span class=\"token operator\">:</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> backgroundColor<span class=\"token operator\">:</span> <span class=\"token string\">'blue'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>View<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span>\n…</code></pre></div>\n<img src=\"/static/5553f8b7e1047517fadbb83c66c46bf7/001.png\" width=\"250\" alt=\"ノッチ対応なし\">\n<ol start=\"2\">\n<li>\n<p>ノッチ対応あり</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">…\n<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n<span class=\"token operator\">&lt;</span>SafeAreaView style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> flex<span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>View style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> backgroundColor<span class=\"token operator\">:</span> <span class=\"token string\">'orange'</span><span class=\"token punctuation\">,</span> flex<span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>View style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> width<span class=\"token operator\">:</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> height<span class=\"token operator\">:</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> backgroundColor<span class=\"token operator\">:</span> <span class=\"token string\">'blue'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>View<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>SafeAreaView<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span>\n…</code></pre></div>\n<img src=\"/static/f9ba4769f654a1a1b739fe638d03ddb2/002.png\" width=\"250\" alt=\"ノッチ対応あり\">\n</li>\n</ol>","fields":{"slug":"/post/5"},"frontmatter":{"date":"2020-11-12","title":"第4回 React Native -イベント・ノッチ-","tags":["React Native"],"active":1}}}},"staticQueryHashes":["63159454"]}