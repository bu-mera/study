{"componentChunkName":"component---src-templates-post-js","path":"/post/8","result":{"data":{"markdownRemark":{"html":"<h1>アプリの共有</h1>\n<p>作成したアプリを共有するための方法です。</p>\n<p>AndroidアプリをDeploygate、iOSアプリをTestFlightを用いて共有しています。</p>\n<h2>Deploygate</h2>\n<h3><a href=\"https://github.com/DeployGate/gradle-deploygate-plugin/blob/master/README_JP.md\" target=\"_blank\" rel=\"noopener noreferrer\">Gradle DeployGate Plugin</a> の導入</h3>\n<p>android/build.gradle</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">buildscript {\n    …\n    repositories {\n        …\n        jcenter()\n    }\n    dependencies {\n        …\n        classpath &#39;com.deploygate:gradle:2.3.0&#39;\n    }\n}</code></pre></div>\n<p>android/app/build.gradle</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">apply plugin: &#39;com.android.application&#39;\napply plugin: &#39;deploygate&#39;\n…\n\nandroid {\n  …\n  deploygate {\n    appOwnerName = &#39;……………&#39;\n    apiToken = &#39;……………&#39;\n  }\n}</code></pre></div>\n<h3>アップロード</h3>\n<p>staging環境の場合の例</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ cd android\n$ ENVFILE=../.env.stg ./gradlew clean uploadDeployGateStaging</code></pre></div>\n<p>また、Deploygateにapkファイルを直接アップロードすることもできます。</p>\n<h3>配布ページの作成</h3>\n<p>アプリのアップロード後、共有用の配布ページを作成します。</p>\n<p>アプリ詳細画面に遷移し、<code class=\"language-text\">共有用のリンクの追加</code>を選択すると、共有用のページが作成されます。</p>\n<img src=\"/static/6489d13d97770c55f71d4188d0a29d36/and001.png\" width=\"400\">\n<p>配布ページ下部に表示されているQRコードやURLを共有することで、アプリの配布ができます。</p>\n<img src=\"/static/eec37950bd6cc47ad6d3dcc2bbdcb238/and002.png\" width=\"400\">\n<p>また、配布ページ内の<code class=\"language-text\">配布ページの設定</code>に遷移することで、配布ページの無効化や公開範囲の設定ができます。</p>\n<h3>配布ページの更新</h3>\n<p>配布ページ作成後にビルドを更新する際、このままの設定では配布ページ上のビルドは更新されないので、android/app/build.gradle に追記する必要があります。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">android {\n  …\n  deploygate {\n    …\n    deployments {\n      staging {\n        distribution {\n          key = &quot;……………&quot;\n        }\n      }\n    }\n  }\n}</code></pre></div>\n<p>keyには配布ページのURLの後ろに付いている文字列（今回の場合はd576ca90a163bd8b92358952655ab29454a08d4b）を設定します。</p>\n<h2>TestFlight</h2>\n<p><a href=\"https://i-app-tec.com/ios/app-upload.html\" target=\"_blank\" rel=\"noopener noreferrer\">アプリ申請のためXcodeでアップロードする</a></p>\n<h3>ビルドの準備</h3>\n<p><a href=\"https://shigu493.com/%E3%80%90ios%E3%80%91%E8%A4%87%E9%9B%91%E3%81%AA%E8%A8%BC%E6%98%8E%E6%9B%B8%E5%91%A8%E3%82%8A%E3%82%92%E3%81%82%E3%81%A3%E3%81%95%E3%82%8A%E6%95%B4%E7%90%86/\" target=\"_blank\" rel=\"noopener noreferrer\">証明書周りのまとめ</a></p>\n<h4>証明書の取得</h4>\n<p><a href=\"https://developer.apple.com/account/resources/certificates/list\" target=\"_blank\" rel=\"noopener noreferrer\">https://developer.apple.com/account/resources/certificates/list</a></p>\n<h4>IDの登録</h4>\n<p><a href=\"https://developer.apple.com/account/resources/identifiers/list\" target=\"_blank\" rel=\"noopener noreferrer\">https://developer.apple.com/account/resources/identifiers/list</a></p>\n<h4>Provisioning Profileの作成</h4>\n<p><a href=\"https://developer.apple.com/account/resources/profiles/list\" target=\"_blank\" rel=\"noopener noreferrer\">https://developer.apple.com/account/resources/profiles/list</a></p>\n<p>作成したProvisioning ProfileはXcodeのTargets > Signing&#x26;Capabilitiesから対象のビルド環境へ反映します。</p>\n<img src=\"/static/5ca181f47f31c40f3551979195d62e9b/iOS008.png\" width=\"400\">\n<h3>App Store Connectへのアプリの登録</h3>\n<!-- App Store Connectにアプリを作成します。 -->\n<p>App Store Connectにログイン後、<code class=\"language-text\">マイApp</code>を選択します。</p>\n<img src=\"/static/4cf42e52db8fef06fa70403d6556bcdc/iOS001.png\" width=\"400\">\n<p>左上の<code class=\"language-text\">App</code>の右にある<code class=\"language-text\">+</code>ボタンから<code class=\"language-text\">新規 App</code>を選択します。</p>\n<img src=\"/static/eb7ea45caf765795ad31bf57e33e9155/iOS002.png\" width=\"400\">\n<img src=\"/static/7936a785591e434d8f50f95388605795/iOS003.png\" width=\"400\">\n<p>アップロードしたいアプリ用のバンドルIDを選択します。</p>\n<h3>内部テスターへの共有</h3>\n<p>内部テスターとして追加したいアカウントを<a href=\"https://appstoreconnect.apple.com/access/users\" target=\"_blank\" rel=\"noopener noreferrer\">ユーザとアクセス</a>で作成しておき、共有したいアプリをアクセス可能にしておきます。</p>\n<p>その後、<code class=\"language-text\">内部グループ</code>の<code class=\"language-text\">App Store Connectユーザ</code>を選択し、アプリを共有したいユーザをテスターに追加していきます。</p>\n<h3>アプリのビルド</h3>\n<p>Xcodeを起動し、上部メニューの<code class=\"language-text\">Product</code> > <code class=\"language-text\">Archive</code>を選択します。</p>\n<img src=\"/static/a3af710636e225acc2ce823f6a6a3174/iOS004.png\" width=\"400\">\n<p>ビルドに成功すると、<code class=\"language-text\">Organizer</code>という名前のウィンドウが自動的に表示されます。</p>\n<h3>アプリのアップロード</h3>\n<p><code class=\"language-text\">Organizer</code>ウィンドウ（上部メニューの Window > Organizer でも表示可能）で、アップロードしたいアプリを選択し、<code class=\"language-text\">Validate App</code>を選びます。</p>\n<p>いくつか確認事項が出てきますので指示に沿って進めます。</p>\n<p>最後に<code class=\"language-text\">Validate</code>ボタンを選択し、完了すると完了画面が表示されます。</p>\n<p>次に、<code class=\"language-text\">Distribute App</code>を選びます。</p>\n<p>こちらも同様にいくつか確認事項が出てきますので指示に沿って進めます。</p>\n<p>最後に<code class=\"language-text\">Upload</code>ボタンを選択し、完了すると完了画面が表示されます。</p>\n<p>これでXcode上でのApp Store Connectへのアップロード作業は完了です。</p>\n<h3>アプリの共有準備</h3>\n<p>App Store Connectにアップロードされていることを確認します。\nアップロード直後は<code class=\"language-text\">処理中</code>というステータスですが、しばらくするとステータスが更新されます。</p>\n<p><code class=\"language-text\">提出準備完了</code>というステータスになれば、あとはテスターに共有するだけです。</p>\n<p><code class=\"language-text\">輸出コンプライアンスがありません</code>というステータスであれば、別途対応が必要です。</p>\n<p><a href=\"https://help.apple.com/app-store-connect/#/dev88f5c7bf9\" target=\"_blank\" rel=\"noopener noreferrer\">輸出コンプライアンスの概要</a>\n<a href=\"https://tommy10344.hatenablog.com/entry/2020/04/29/025809\" target=\"_blank\" rel=\"noopener noreferrer\">「輸出コンプライアンスがありません」と表示しない方法</a></p>\n<h2>ビルドの更新</h2>\n<p>ビルドの更新をする際、ビルドバージョンを変更する必要があります。</p>\n<h3>Android</h3>\n<p>android/app/build.gradle</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">android {\n  …\n  defaultConfig {\n    …\n    versionCode 1\n    …\n  }\n  …\n}</code></pre></div>\n<h3>iOS</h3>\n<p>TARGETS > [ PROJECT_NAME ] > General > Identify > Build</p>\n<img src=\"/static/daa1f239484299af5619acfa68010ddc/iOS007.png\" width=\"400\">","fields":{"slug":"/post/8"},"frontmatter":{"title":"第7回 React Native -アプリの共有-","date":"2020/12/03","tags":["React Native"]}}},"pageContext":{"prev":{"html":"<h1>プッシュ通知</h1>\n<p>FirebaseのFirebase Cloud Messaging（FCM）を使用します。</p>\n<h2>導入</h2>\n<p>実装には <a href=\"https://rnfirebase.io/\" target=\"_blank\" rel=\"noopener noreferrer\">REACT NATIVE FIREBASE（v6）</a> の <a href=\"https://rnfirebase.io/messaging/usage\" target=\"_blank\" rel=\"noopener noreferrer\">Cloud Messaging</a> を使用します。</p>\n<!-- ただ、ローカル通知に関してはv6ではサポート外なので、ローカル通知の実装には別途対応が必要です。 -->\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ yarn add @react-native-firebase/app @react-native-firebase/messaging\n$ npx pod-install ios</code></pre></div>\n<h2>Firebaseプロジェクトの準備</h2>\n<h2>アプリの登録</h2>\n<p>AndroidとiOSそれぞれで登録します。</p>\n<p>登録後、Androidでは<code class=\"language-text\">google-services.json</code>、\niOSでは<code class=\"language-text\">GoogleService-Info.plist</code>をダウンロードします。</p>\n<h2>Android</h2>\n<p><a href=\"https://gibachansblog.hatenablog.jp/entry/2020/08/14/051052\" target=\"_blank\" rel=\"noopener noreferrer\">参考サイト</a></p>\n<h3>firebaseの導入</h3>\n<p><code class=\"language-text\">/android/app</code>に<code class=\"language-text\">google-services.json</code>を配置します。</p>\n<p><code class=\"language-text\">/android/build.gradle</code></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">buildscript {\n    ...\n    dependencies {\n        ...\n        classpath &#39;com.google.gms:google-services:4.3.3&#39; // これを追加\n    }\n}</code></pre></div>\n<p><code class=\"language-text\">/android/app/build.gradle</code></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">apply plugin: &#39;com.google.gms.google-services&#39; // これを追加</code></pre></div>\n<h3><a href=\"https://qiita.com/myzkyy/items/4c286c3d096c5aaa2b3c\" target=\"_blank\" rel=\"noopener noreferrer\">通知チャネル</a></h3>\n<p>Android 8.0（API レベル 26）以降、通知はすべてチャネルに割り当てる必要があります。<br>\n<a href=\"https://developer.android.com/training/notify-user/channels?hl=ja\" target=\"_blank\" rel=\"noopener noreferrer\">公式ドキュメント</a></p>\n<p><code class=\"language-text\">android/app/src/〜/MainActivity.java</code></p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">android<span class=\"token punctuation\">.</span>app<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">NotificationChannel</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">android<span class=\"token punctuation\">.</span>app<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">NotificationManager</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">android<span class=\"token punctuation\">.</span>os<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Build</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MainActivity</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ReactActivity</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">createNotificationChannel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Build</span><span class=\"token punctuation\">.</span>VERSION<span class=\"token punctuation\">.</span>SDK_INT <span class=\"token operator\">>=</span> <span class=\"token class-name\">Build</span><span class=\"token punctuation\">.</span>VERSION_CODES<span class=\"token punctuation\">.</span><span class=\"token class-name\">O</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token class-name\">String</span> id <span class=\"token operator\">=</span> <span class=\"token string\">\"notification\"</span><span class=\"token punctuation\">;</span>\n      <span class=\"token class-name\">CharSequence</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"お知らせ\"</span><span class=\"token punctuation\">;</span>\n      <span class=\"token class-name\">String</span> description <span class=\"token operator\">=</span> <span class=\"token string\">\"新しいメッセージの受信などをお知らせするよ\"</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">int</span> importance <span class=\"token operator\">=</span> <span class=\"token class-name\">NotificationManager</span><span class=\"token punctuation\">.</span>IMPORTANCE_HIGH<span class=\"token punctuation\">;</span>\n      <span class=\"token class-name\">NotificationChannel</span> channel <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NotificationChannel</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> importance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      channel<span class=\"token punctuation\">.</span><span class=\"token function\">setDescription</span><span class=\"token punctuation\">(</span>description<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token class-name\">NotificationManager</span> notificationManager <span class=\"token operator\">=</span> <span class=\"token function\">getSystemService</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">NotificationManager</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      notificationManager<span class=\"token punctuation\">.</span><span class=\"token function\">createNotificationChannel</span><span class=\"token punctuation\">(</span>channel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token annotation punctuation\">@Override</span>\n  <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Bundle</span> savedInstanceState<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token function\">createNotificationChannel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">firebase.json</code></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">{\n  &quot;react-native&quot;: {\n    ...\n    &quot;messaging_android_notification_channel_id&quot;: &quot;notification&quot;\n  }\n}</code></pre></div>\n<h2>iOS</h2>\n<p><a href=\"https://gibachansblog.hatenablog.jp/entry/2020/08/15/095114\" target=\"_blank\" rel=\"noopener noreferrer\">参考サイト</a></p>\n<h3>APNs証明書の登録</h3>\n<h3>firebaseの導入</h3>\n<p><code class=\"language-text\">AppDelegate.m</code></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">#import &lt;Firebase.h&gt;\n…\n\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions\n{\n  …\n  if ([FIRApp defaultApp] == nil) {\n    [FIRApp configure];\n  }</code></pre></div>\n<h3>プッシュ通知の受信を許可</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">...</span>\n  <span class=\"token comment\">// 通知の許可をリクエストする</span>\n  <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">requestUserPermission</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> authStatus <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">messaging</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">requestPermission</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> enabled <span class=\"token operator\">=</span>\n      authStatus <span class=\"token operator\">===</span> messaging<span class=\"token punctuation\">.</span>AuthorizationStatus<span class=\"token punctuation\">.</span><span class=\"token constant\">AUTHORIZED</span> <span class=\"token operator\">||</span>\n      authStatus <span class=\"token operator\">===</span> messaging<span class=\"token punctuation\">.</span>AuthorizationStatus<span class=\"token punctuation\">.</span><span class=\"token constant\">PROVISIONAL</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>enabled<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'通知が許可されました'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 最初に通知の許可をリクエストする</span>\n    <span class=\"token function\">requestUserPermission</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token operator\">...</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>JS</h2>\n<h3>トークンの取得</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> token <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">messaging</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getToken</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3>通知時のハンドリング</h3>\n<p><code class=\"language-text\">index.js</code></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">...</span>\n<span class=\"token keyword\">import</span> messaging <span class=\"token keyword\">from</span> <span class=\"token string\">'@react-native-firebase/messaging'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// これを追加する</span>\n\n<span class=\"token comment\">// バックグラウンドで通知を受信</span>\n<span class=\"token function\">messaging</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setBackgroundMessageHandler</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token parameter\">remoteMessage</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">[</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>remoteMessage<span class=\"token punctuation\">.</span>notification<span class=\"token operator\">?.</span>title<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">]を受信しました</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nAppRegistry<span class=\"token punctuation\">.</span><span class=\"token function\">registerComponent</span><span class=\"token punctuation\">(</span>appName<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> App<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">App.js</code></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">...</span>\n<span class=\"token keyword\">import</span> messaging <span class=\"token keyword\">from</span> <span class=\"token string\">'@react-native-firebase/messaging'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// フォアグラウンドで通知を受信</span>\n    <span class=\"token keyword\">const</span> unsubscribe <span class=\"token operator\">=</span> <span class=\"token function\">messaging</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">onMessage</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token parameter\">remoteMessage</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">[</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>remoteMessage<span class=\"token punctuation\">.</span>notification<span class=\"token operator\">?.</span>title<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">]を受信しました</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> unsubscribe<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  …\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>アプリの状態</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Foreground</td>\n<td>アプリが前面にあり動作している状態</td>\n</tr>\n<tr>\n<td>Background</td>\n<td>ホーム画面や他のアプリが前面にあり、アプリが背面で動作している状態</td>\n</tr>\n<tr>\n<td>Quit</td>\n<td>タスクキルなどでアプリが死んでいる状態</td>\n</tr>\n</tbody>\n</table>\n<h2><a href=\"https://qiita.com/iwashi1t/items/517cda73dba715025b6c\" target=\"_blank\" rel=\"noopener noreferrer\">フォアグラウンドでのプッシュ通知表示</a></h2>\n<p><code class=\"language-text\">react-native-push-notification</code> を使用します。</p>\n<!-- \n```js\nPushNotification.configure({\n  onNotification: notification => {\n    // プッシュ通知をタップしたときに呼ばれる\n    // URLを開くなどの処理\n    notification.finish(PushNotificationIOS.FetchResult.NoData);\n    PushNotificationIOS.setApplicationIconBadgeNumber(0);\n  },\n});\n```\n -->\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">showNotification</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">remoteMessage</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  PushNotification<span class=\"token punctuation\">.</span><span class=\"token function\">localNotification</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      title<span class=\"token operator\">:</span> message<span class=\"token punctuation\">.</span>notification<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">,</span>\n      message<span class=\"token operator\">:</span> message<span class=\"token punctuation\">.</span>notification<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>[Android]通知アイコンの設定</h2>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">showNotification</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">remoteMessage</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  PushNotification<span class=\"token punctuation\">.</span><span class=\"token function\">localNotification</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      largeIcon<span class=\"token operator\">:</span> <span class=\"token string\">'largeIconName'</span><span class=\"token punctuation\">,</span>\n      smallIcon<span class=\"token operator\">:</span> <span class=\"token string\">'smallIconName'</span><span class=\"token punctuation\">,</span>\n      title<span class=\"token operator\">:</span> message<span class=\"token punctuation\">.</span>notification<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">,</span>\n      message<span class=\"token operator\">:</span> message<span class=\"token punctuation\">.</span>notification<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","fields":{"slug":"/post/9"},"frontmatter":{"date":"2020-12-10","title":"第8回 React Native -Firebase・プッシュ通知-","tags":["React Native"],"active":1}},"next":{"html":"<h1>スプラッシュ</h1>\n<!-- デフォルトではAndroidのスプラッシュはないので、まずは実装していきます。 -->\n<!-- \n\n[参考](https://medium.com/@appstud/add-a-splash-screen-to-a-react-native-app-810492e773f9)\n\n今回は黒背景のスプラッシュ画面を作成します。\n\n#### android/app/src/main/java/.../MainActivity.java\n\n```java\nimport android.os.Bundle;\nimport org.devio.rn.splashscreen.SplashScreen;\n\npublic class MainActivity extends ReactActivity {\n   @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        SplashScreen.show(this);\n        super.onCreate(savedInstanceState);\n    }\n}\n```\n\n#### android/app/src/main/res/layout/launch_screen.xml\n\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:orientation=\"vertical\" android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:background=\"@drawable/splash_screen\">\n</LinearLayout>\n```\n\n\nスプラッシュスクリーン描画用xmlファイル\ndrawable/splash_screen.xml\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<layer-list xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    \n    <item\n        android:drawable=\"@color/splash_background\"/>\n\n</layer-list>\n```\n\n背景色の定義\ncolor.xml\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<resources>\n  ...\n    <color name=\"splash_background\">#000000</color>\n</resources>\n```\n\n\nこれでスプラッシュの実装ができました。\nただ、このままでは起動直後に\n\n\n\n\nスプラッシュスクリーンアクティビティのテーマの定義\nvalues/styles.xml\n```\n...\n    <style name=\"SplashTheme\" parent=\"Theme.AppCompat.Light.NoActionBar\">\n        <item name=\"android:background\">@drawable/splash_screen</item>\n    </style>\n```\n\nスプラッシュアクティビティの作成\nSplashActivity.java\n```java\npackage [パッケージ名]; // 書き方は他Activityを参考にしてください。\n\nimport android.content.Intent;\nimport android.os.Bundle;\nimport androidx.appcompat.app.AppCompatActivity;\n\npublic class SplashActivity extends AppCompatActivity {\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        Intent intent = new Intent(this, MainActivity.class);\n        startActivity(intent);\n        finish();\n    }\n}\n```\nAndroidManifest.xml\n\n```\n...\n    <application>\n        <activity\n          android:name=\".SplashActivity\"\n          android:theme=\"@style/SplashTheme\"\n          android:label=\"@string/app_name\">\n          <intent-filter>\n              <action android:name=\"android.intent.action.MAIN\" />\n              <category android:name=\"android.intent.category.LAUNCHER\" />\n          </intent-filter>\n        </activity>\n        <activity\n          android:name=\".MainActivity\"\n          android:label=\"@string/app_name\"\n          android:configChanges=\"keyboard|keyboardHidden|orientation|screenSize\"\n          android:windowSoftInputMode=\"adjustResize\"\n          android:exported=\"true\"/>\n\n      <activity android:name=\"com.facebook.react.devsupport.DevSettingsActivity\" />\n    </application>\n``` -->\n<!-- ## 制御\n\n#### android/app/src/main/java/.../MainActivity.java\n\n```java\nimport android.os.Bundle;\nimport org.devio.rn.splashscreen.SplashScreen;\n\npublic class MainActivity extends ReactActivity {\n   @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        SplashScreen.show(this);\n        super.onCreate(savedInstanceState);\n    }\n}\n```\n\n#### android/app/src/main/res/layout/launch_screen.xml\n\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:orientation=\"vertical\" android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:background=\"@drawable/splash_screen\">\n</LinearLayout>\n``` -->\n<p>スプラッシュ画面とはアプリ起動直後の画面のことです。</p>\n<p>アプリ内で必要なデータの取得など、アプリの準備作業をスプラッシュ画面の裏側で行うことで、UXの向上を図ることができます。</p>\n<p>react nativeではプロジェクト作成時からiOS側では実装されていて、Android側では実装されていないので、Android側でのスプラッシュ画面の実装が必要となります。</p>\n<p>また、iOSのスプラッシュ画面もただ表示しているだけで、制御する必要があります。</p>\n<p>スプラッシュの制御には<code class=\"language-text\">react-native-splash-screen</code>を使用します。</p>\n<p>ネイティブ側でスプラッシュの表示をし、JS側では任意のタイミングで非表示にするようにします。</p>\n<h2>導入</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">yarn add react-native-splash-screen</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">cd ios\npod install</code></pre></div>\n<p>or</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npx pod-install ios</code></pre></div>\n<h2>スプラッシュの実装・制御</h2>\n<p>今回は青背景のスプラッシュ画面を作成します。</p>\n<h3>iOS</h3>\n<p>スプラッシュ画面のファイルは <code class=\"language-text\">ios/[プロジェクト名]/LaunchScreen.storyboard</code> です。\nデフォルトでは文字が表示されているので、不要部分を削除し、背景色を変更します。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">...\n&lt;!--View Controller--&gt;\n&lt;scene sceneID=&quot;EHf-IW-A2E&quot;&gt;\n    &lt;objects&gt;\n        &lt;viewController id=&quot;01J-lp-oVM&quot; sceneMemberID=&quot;viewController&quot;&gt;\n            &lt;view key=&quot;view&quot; contentMode=&quot;scaleToFill&quot; id=&quot;Ze5-6b-2t3&quot;&gt;\n                &lt;!-- subviews、constraintsの削除 --&gt;\n                &lt;rect key=&quot;frame&quot; x=&quot;0.0&quot; y=&quot;0.0&quot; width=&quot;375&quot; height=&quot;667&quot;/&gt;\n                &lt;autoresizingMask key=&quot;autoresizingMask&quot; widthSizable=&quot;YES&quot; heightSizable=&quot;YES&quot;/&gt;\n                &lt;viewLayoutGuide key=&quot;safeArea&quot; id=&quot;Bcu-3y-fUS&quot;/&gt;\n                &lt;!-- backgroundColorの変更 --&gt;\n                &lt;color key=&quot;backgroundColor&quot; red=&quot;0&quot; green=&quot;0&quot; blue=&quot;1&quot; alpha=&quot;1&quot; colorSpace=&quot;custom&quot; customColorSpace=&quot;sRGB&quot;/&gt;\n            &lt;/view&gt;\n        &lt;/viewController&gt;\n        &lt;placeholder placeholderIdentifier=&quot;IBFirstResponder&quot; id=&quot;iYj-Kq-Ea1&quot; userLabel=&quot;First Responder&quot; sceneMemberID=&quot;firstResponder&quot;/&gt;\n    &lt;/objects&gt;\n    &lt;point key=&quot;canvasLocation&quot; x=&quot;52.173913043478265&quot; y=&quot;375&quot;/&gt;\n&lt;/scene&gt;</code></pre></div>\n<p>次に、スプラッシュ画面の制御をしていきます。<br>\nアプリケーションの起動や終了や中断などの処理を記載している <code class=\"language-text\">ios/[ProjectName]/AppDelegate.m</code> に下記のように追加します。</p>\n<div class=\"gatsby-highlight\" data-language=\"m\"><pre class=\"language-m\"><code class=\"language-m\">...\n#import &quot;RNSplashScreen.h&quot; // add\n\n@implementation AppDelegate\n\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions\n{\n    ...\n    [RNSplashScreen show]; // add\n    return YES;\n}\n\n@end</code></pre></div>\n<h3>Android</h3>\n<p><a href=\"https://developer.android.com/guide/topics/resources/providing-resources?hl=ja\" target=\"_blank\" rel=\"noopener noreferrer\">Androidのリソース</a>は<code class=\"language-text\">android/app/src/main/res/</code>配下に配置する必要があり、リソースタイプ別に固有のディレクトリ名が必要となります。</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>mipmap/</td>\n<td>ランチャーアイコン（ホーム画面に表示されるアイコン）</td>\n</tr>\n<tr>\n<td>values/</td>\n<td>文字列、整数、色などの定義<br>colors.xml: 色の値の定義用<br>strings.xml: 文字列の値の定義用<br>styles.xml: スタイルの定義用</td>\n</tr>\n<tr>\n<td>drawable/</td>\n<td>画面上に描画するグラフィック</td>\n</tr>\n<tr>\n<td>layout/</td>\n<td>レイアウト定義用</td>\n</tr>\n</tbody>\n</table>\n<p>まず、<code class=\"language-text\">android/app/src/main/java/.../MainActivity.java</code> に下記のように追加します。</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">android<span class=\"token punctuation\">.</span>os<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Bundle</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// add</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>devio<span class=\"token punctuation\">.</span>rn<span class=\"token punctuation\">.</span>splashscreen<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SplashScreen</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// add</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MainActivity</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ReactActivity</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Bundle</span> savedInstanceState<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">SplashScreen</span><span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span>savedInstanceState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>スプラッシュ画面のレイアウトを定義するファイル <code class=\"language-text\">res/layout/launch_screen.xml</code> を作成します。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;\n&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;\n    android:orientation=&quot;vertical&quot; android:layout_width=&quot;match_parent&quot;\n    android:layout_height=&quot;match_parent&quot;\n    android:background=&quot;@drawable/splash_screen&quot;&gt;\n&lt;/LinearLayout&gt;</code></pre></div>\n<p>スプラッシュ画面を描画するためのファイル<code class=\"language-text\">res/drawable/splash_screen.xml</code> を作成します。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;\n&lt;layer-list xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;\n    \n    &lt;item\n        android:drawable=&quot;@color/splash_background&quot;/&gt;\n\n&lt;/layer-list&gt;</code></pre></div>\n<!--\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:orientation=\"vertical\" android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:background=\"@drawable/splash_screen\">\n</LinearLayout>\n```\n\nスプラッシュスクリーン描画用xmlファイル\ndrawable/splash_screen.xml\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<layer-list xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    \n    <item\n        android:drawable=\"@color/splash_background\"/>\n\n</layer-list>\n``` -->\n<p>最後に、<code class=\"language-text\">res/values/color.xml</code> に背景色の定義をします。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;\n&lt;resources&gt;\n  ...\n    &lt;color name=&quot;splash_background&quot;&gt;#0000FF&lt;/color&gt;\n&lt;/resources&gt;</code></pre></div>\n<h3>JS</h3>\n<p>AndroidとiOSでスプラッシュの表示ができたら、次はJS\n側で任意のタイミングで非表示にします。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> SplashScreen <span class=\"token keyword\">from</span> <span class=\"token string\">'react-native-splash-screen'</span>\n\n<span class=\"token comment\">// 非表示したい箇所で下記を記述</span>\nSplashScreen<span class=\"token punctuation\">.</span><span class=\"token function\">hide</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 一定時間経過後に非表示にする場合</span>\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  SplashScreen<span class=\"token punctuation\">.</span><span class=\"token function\">hide</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span></code></pre></div>\n<img src=\"/static/a7ad26704a033da526218bf68e842aab/sp-ios1.gif\" width=\"200\">\n<img src=\"/static/77db0ff1cb5321d91e5d9eb4669b849e/sp-and1.gif\" width=\"200\">\n<p>Androidのスプラッシュ画面ですが、起動直後には表示されていないのが確認できます。</p>\n<p>Androidでも起動直後から表示されるよう実装していきます。</p>\n<h3>Androidで起動直後にスプラッシュを出す</h3>\n<p><a href=\"https://medium.com/@appstud/add-a-splash-screen-to-a-react-native-app-810492e773f9\" target=\"_blank\" rel=\"noopener noreferrer\">参考ページ</a></p>\n<p>スプラッシュ用のアクティビティ <code class=\"language-text\">android/app/src/main/java/.../SplashActivity.java</code>  を作成します。</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token punctuation\">[</span>パッケージ名<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 書き方は他Activityを参考にしてください。</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">android<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Intent</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">android<span class=\"token punctuation\">.</span>os<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Bundle</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">androidx<span class=\"token punctuation\">.</span>appcompat<span class=\"token punctuation\">.</span>app<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">AppCompatActivity</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SplashActivity</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AppCompatActivity</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Bundle</span> savedInstanceState<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span>savedInstanceState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">Intent</span> intent <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Intent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">MainActivity</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">startActivity</span><span class=\"token punctuation\">(</span>intent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">finish</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">SplashActivity</code> 用のテーマの定義を <code class=\"language-text\">values/styles.xml</code> に記述します。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">...\n    &lt;style name=&quot;SplashTheme&quot; parent=&quot;Theme.AppCompat.Light.NoActionBar&quot;&gt;\n        &lt;item name=&quot;android:background&quot;&gt;@drawable/splash_screen&lt;/item&gt;\n    &lt;/style&gt;</code></pre></div>\n<p>アプリの基本的な情報が書かれているファイル <code class=\"language-text\">AndroidManifest.xml</code> に <code class=\"language-text\">SplashActivity</code> を追加します。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">...\n&lt;application&gt;\n\n    &lt;!-- SplashActivityの追加、MainActivityのintent-filterを移動 --&gt;\n    &lt;activity\n      android:name=&quot;.SplashActivity&quot;\n      android:theme=&quot;@style/SplashTheme&quot;\n      android:label=&quot;@string/app_name&quot;&gt;\n      &lt;intent-filter&gt;\n          &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;\n          &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;\n      &lt;/intent-filter&gt;\n    &lt;/activity&gt;\n\n    &lt;!-- intent-filterの削除、`android:exported=&quot;true&quot;`パラメータの追加 --&gt;\n    &lt;activity\n      android:name=&quot;.MainActivity&quot;\n      android:label=&quot;@string/app_name&quot;\n      android:configChanges=&quot;keyboard|keyboardHidden|orientation|screenSize&quot;\n      android:windowSoftInputMode=&quot;adjustResize&quot;\n      android:exported=&quot;true&quot;/&gt;\n\n  &lt;activity android:name=&quot;com.facebook.react.devsupport.DevSettingsActivity&quot; /&gt;\n&lt;/application&gt;</code></pre></div>\n<img src=\"/static/911a8aca7ca53044c0a4ff3e9e25979f/sp-and2.gif\" width=\"200\">\n<h1>アイコン</h1>\n<p>iOS/Androidともに、様々なサイズのリソースを設定する必要があります。\n今回はサイズ別にアイコンが全て用意されている前提で進めていきます。</p>\n<h2>iOS</h2>\n<p>Xcode上で設定していきます。</p>\n<p>ターゲット設定の <code class=\"language-text\">General &gt; App Icons and Launch Images &gt; App Icons Source</code> を編集します（右の矢印をクリック）</p>\n<img src=\"/static/f7903e8ec5b850eda4ef85a04d935683/icon1.png\" width=\"400\">\n<p>素材を各サイズに合わせてドラッグすることで、アイコンの設定は完了します。</p>\n<img src=\"/static/2621eacdd91f10326fadefd958641bfd/icon2.png\" width=\"400\">\n<h2>Android</h2>\n<h3><a href=\"https://developer.android.com/training/multiscreen/screendensities?hl=ja\" target=\"_blank\" rel=\"noopener noreferrer\">画面ピクセル密度（dpi）</a></h3>\n<p>Androidデバイスは、画面サイズだけでなく、画面のピクセルサイズも様々あります。\nそのため、各デバイスのピクセルの密度に合わせたリソースを使用する必要があります。\n密度によって下記のようなグループ分けがされます。</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ldpi</td>\n<td>低密度画面</td>\n</tr>\n<tr>\n<td>mdpi</td>\n<td>中密度画面</td>\n</tr>\n<tr>\n<td>hdpi</td>\n<td>高密度画面</td>\n</tr>\n<tr>\n<td>xhdpi</td>\n<td>超高密度画面</td>\n</tr>\n<tr>\n<td>xxhdpi</td>\n<td>超超高密度画面</td>\n</tr>\n<tr>\n<td>xxxhdpi</td>\n<td>超超超高密度画面</td>\n</tr>\n</tbody>\n</table>\n<p>リソースの使い分けをするためには、下記のように各グループごとに<code class=\"language-text\">mipmap/</code>ディレクトリを用意し、その中に対応するリソースを格納していきます。\nAndroidではプロジェクト作成時にデフォルトアイコンが設定されています。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">mipmap-xxxhdpi/\n  ic_launcher.png\n  ic_launcher_round.png\nmipmap-xxhdpi/\n  ic_launcher.png\n  ic_launcher_round.png\nmipmap-xhdpi/\n  ic_launcher.png\n  ic_launcher_round.png\nmipmap-hdpi/\n  ic_launcher.png\n  ic_launcher_round.png\nmipmap-mdpi/\n  ic_launcher.png\n  ic_launcher_round.png</code></pre></div>\n<h3><a href=\"https://developer.android.com/guide/practices/ui_guidelines/icon_design_adaptive?hl=ja\" target=\"_blank\" rel=\"noopener noreferrer\">アダプティブ アイコン</a></h3>\n<p>Android 8.0（API レベル 26）から、アダプティブ ランチャー アイコンが導入され、デバイスモデルごとに異なる図形を表示できるようになりました。\nアダプティブアイコンに対応した実装をしていきます。</p>\n<p><code class=\"language-text\">ic_launcher_foreground.png</code> と <code class=\"language-text\">ic_launcher_background.png</code>がdpi別に用意されている場合、同じように各ディレクトリに格納しておきます。</p>\n<p><code class=\"language-text\">res/mipmap-anydpi-v26/ic_launcher.xml</code>を作成します。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;\n&lt;adaptive-icon xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;\n    &lt;background android:drawable=&quot;@mipmap/ic_launcher_background&quot; /&gt;\n    &lt;foreground android:drawable=&quot;@mipmap/ic_launcher_foreground&quot; /&gt;\n&lt;/adaptive-icon&gt;</code></pre></div>\n<p>今回の場合のアイコン周りのディレクトリ構成は下記のようになります。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">mipmap-anydpi-v26/\n  ic_launcher.xml\nmipmap-xxxhdpi/\n  ic_launcher.png\n  ic_launcher_round.png\n  ic_launcher_foreground.png\n  ic_launcher_background.png\nmipmap-xxhdpi/\n  ic_launcher.png\n  ic_launcher_round.png\n  ic_launcher_foreground.png\n  ic_launcher_background.png\nmipmap-xhdpi/\n  ic_launcher.png\n  ic_launcher_round.png\n  ic_launcher_foreground.png\n  ic_launcher_background.png\nmipmap-hdpi/\n  ic_launcher.png\n  ic_launcher_round.png\n  ic_launcher_foreground.png\n  ic_launcher_background.png\nmipmap-mdpi/\n  ic_launcher.png\n  ic_launcher_round.png\n  ic_launcher_foreground.png\n  ic_launcher_background.png</code></pre></div>","fields":{"slug":"/post/7"},"frontmatter":{"date":"2020-11-26","title":"第6回 React Native -スプラッシュ・アイコン-","tags":["React Native"],"active":1}}}},"staticQueryHashes":["63159454"]}